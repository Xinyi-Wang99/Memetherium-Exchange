{"ast":null,"code":"var _jsxFileName = \"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/src/pages/ZombieInventory.js\";\nimport React, { Component } from \"react\";\nimport { Card, Grid, Input, Segment, Pagination } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport ZombieCard from \"../components/zombieCard\";\n\nfunction mapStateToProps(state) {\n  return {\n    CZ: state.CZ,\n    totalZombieCount: state.totalZombieCount,\n    userAddress: state.userAddress\n  };\n}\n\nclass ZombieInventory extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ZombieTable: [],\n      activePage: 1,\n      totalPages: Math.ceil(this.props.totalZombieCount / 9)\n    };\n\n    this.componentDidMount = async () => {\n      await this.makeZombieCards();\n    };\n\n    this.onChange = async (e, pageInfo) => {\n      await this.setState({\n        activePage: pageInfo.activePage\n      });\n      this.makeZombieCards();\n    };\n\n    this.handleInputChange = async (e, {\n      value\n    }) => {\n      await this.setState({\n        activePage: value\n      });\n      this.makeZombieCards();\n    };\n\n    this.makeZombieCards = async () => {\n      let zList = [];\n      let zOwner = [];\n      await this.setState({\n        zombieTable: []\n      }); // clear screen while waiting for data\n\n      for (let i = this.state.activePage * 9 - 9; i < this.state.activePage * 9; i++) {\n        try {\n          let metaData = await this.props.CZ.zombies(i);\n          zList.push(metaData);\n          let myOwner = await this.props.CZ.zombieToOwner(i);\n          zOwner.push(myOwner);\n        } catch (err) {\n          break;\n        }\n      } // create a set of zombie cards in the state table\n\n\n      let zombieTable = [];\n\n      for (let i = 0; i < zList.length; i++) {\n        let myDate = new Date(zList[i].readyTime * 1000).toLocaleString();\n        zombieTable.push(React.createElement(ZombieCard, {\n          key: i,\n          zombieId: this.state.activePage * 9 - 9 + i,\n          zombieName: zList[i].name,\n          zombieDNA: zList[i].dna.toString(),\n          zombieLevel: zList[i].level,\n          zombieReadyTime: myDate,\n          zombieWinCount: zList[i].winCount,\n          zombieLossCount: zList[i].lossCount,\n          zombieOwner: zOwner[i],\n          myOwner: this.props.userAddress === zOwner[i],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }));\n      }\n\n      this.setState({\n        zombieTable\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \" Complete Zombie Inventory \"), \"The zombies you own have a yellow background; clicking anywhere on a yellow card will bring up a list of actions you can perform.\", React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      columns: 2,\n      verticalAlign: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      secondary: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"activePage: \", this.state.activePage), React.createElement(Input, {\n      min: 1,\n      max: this.state.totalPages,\n      onChange: this.handleInputChange,\n      type: \"range\",\n      value: this.state.activePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }))), React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Pagination, {\n      activePage: this.state.activePage,\n      onPageChange: this.onChange,\n      totalPages: this.state.totalPages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, this.state.zombieTable)));\n  }\n\n}\n\nexport default connect(mapStateToProps)(ZombieInventory);","map":{"version":3,"sources":["/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/src/pages/ZombieInventory.js"],"names":["React","Component","Card","Grid","Input","Segment","Pagination","connect","ZombieCard","mapStateToProps","state","CZ","totalZombieCount","userAddress","ZombieInventory","ZombieTable","activePage","totalPages","Math","ceil","props","componentDidMount","makeZombieCards","onChange","e","pageInfo","setState","handleInputChange","value","zList","zOwner","zombieTable","i","metaData","zombies","push","myOwner","zombieToOwner","err","length","myDate","Date","readyTime","toLocaleString","name","dna","toString","level","winCount","lossCount","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Card,\n  Grid,\n  Input,\n  Segment,\n  Pagination,\n} from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\n\nimport ZombieCard from \"../components/zombieCard\";\n\nfunction mapStateToProps(state) {\n  return {\n    CZ: state.CZ,\n    totalZombieCount: state.totalZombieCount,\n    userAddress: state.userAddress\n  };\n}\n\nclass ZombieInventory extends Component {\n  state = {\n    ZombieTable: [],\n    activePage: 1,\n    totalPages: Math.ceil(this.props.totalZombieCount / 9)\n  };\n\n  componentDidMount = async () => {\n    await this.makeZombieCards();\n  };\n\n  onChange = async (e, pageInfo) => {\n    await this.setState({ activePage: pageInfo.activePage });\n    this.makeZombieCards();\n  };\n\n  handleInputChange = async (e, { value }) => {\n      await this.setState({ activePage: value });\n      this.makeZombieCards();\n  }\n\n  makeZombieCards = async () => {\n    let zList = [];\n    let zOwner = [];\n    await this.setState({ zombieTable: [] }); // clear screen while waiting for data\n    for (\n      let i = this.state.activePage * 9 - 9;\n      i < this.state.activePage * 9;\n      i++\n    ) {\n      try {\n        let metaData = await this.props.CZ.zombies(i);\n        zList.push(metaData);\n        let myOwner = await this.props.CZ.zombieToOwner(i);\n        zOwner.push(myOwner);\n      } catch (err) {\n        break;\n      }\n    }\n\n    // create a set of zombie cards in the state table\n    let zombieTable = [];\n    for (let i = 0; i < zList.length; i++) {\n      let myDate = new Date(zList[i].readyTime * 1000).toLocaleString();\n      zombieTable.push(\n        <ZombieCard\n          key={i}\n          zombieId={this.state.activePage * 9 - 9 + i}\n          zombieName={zList[i].name}\n          zombieDNA={zList[i].dna.toString()}\n          zombieLevel={zList[i].level}\n          zombieReadyTime={myDate}\n          zombieWinCount={zList[i].winCount}\n          zombieLossCount={zList[i].lossCount}\n          zombieOwner={zOwner[i]}\n          myOwner={this.props.userAddress === zOwner[i]}\n        />\n      );\n    }\n    this.setState({ zombieTable });\n  };\n\n  render() {\n    return (\n      <div>\n        <hr />\n        <h2> Complete Zombie Inventory </h2>\n        The zombies you own have a yellow background; clicking anywhere on a\n        yellow card will bring up a list of actions you can perform.\n        <hr />\n        <Grid columns={2} verticalAlign=\"middle\">\n          <Grid.Column>\n            <Segment secondary>\n              <div>activePage: {this.state.activePage}</div>\n              <Input\n                min={1}\n                max={this.state.totalPages}\n                onChange={this.handleInputChange}\n                type=\"range\"\n                value={this.state.activePage}\n              />\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            <Pagination\n              activePage={this.state.activePage}\n              onPageChange={this.onChange}\n              totalPages={this.state.totalPages}\n            />\n          </Grid.Column>\n        </Grid>\n        <br /> <br />\n        <div>\n          <Card.Group>{this.state.zombieTable}</Card.Group>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(ZombieInventory);\n"]},"metadata":{},"sourceType":"module"}