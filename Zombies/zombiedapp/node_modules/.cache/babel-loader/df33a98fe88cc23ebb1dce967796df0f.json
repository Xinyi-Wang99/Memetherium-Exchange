{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/inherits\";//\n// This is the \"Feed On Random Cryptokitty\" page\n//\nimport React,{Component}from\"react\";import{Link}from\"react-router-dom\";import{connect}from\"react-redux\";import{Button,Icon,Form,Message}from\"semantic-ui-react\";import ZombieCard from\"../components/zombieCard\";import getZombieCount from\"../utils/getZombieCount\";function mapStateToProps(state){return{CZ:state.CZ,userAddress:state.userAddress};}var FeedOnKitty=/*#__PURE__*/function(_Component){_inherits(FeedOnKitty,_Component);function FeedOnKitty(){var _getPrototypeOf2;var _this;_classCallCheck(this,FeedOnKitty);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(FeedOnKitty)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={value:\"\",message:\"\",errorMessage:\"\",loading:false,kittyImage:\"\",hungryZombieId:null,zombieName:\"\",zombieDNA:0};_this.onSubmit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();_this.setState({loading:true,errorMessage:\"\",message:\"waiting for blockchain transaction to complete...\"});_context.prev=2;_context.next=5;return _this.props.CZ.feedOnKitty(_this.state.hungryZombieId,0);case 5:// contains the zombie ID and a 0 for kitty ID since contract is random\n_this.setState({loading:false,message:\"You have eaten a poor innocent CryptoKitty.   Buuuuurrrrpp!!!\"});getZombieCount(_this.props.CZ,_this.props.userAddress);_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](2);_this.setState({loading:false,errorMessage:_context.t0.message,message:\"User rejected transaction\"});case 12:case\"end\":return _context.stop();}}},_callee,null,[[2,9]]);}));return function(_x){return _ref.apply(this,arguments);};}();return _this;}_createClass(FeedOnKitty,[{key:\"componentDidMount\",// get a random cryptokitty image and the hungry zombie ID when the component mounts\nvalue:function(){var _componentDidMount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var hungryZombieId,url,res,kitty;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:hungryZombieId=+this.props.location.state.zombieId;url=\"https://api.cryptokitties.co/kitties/\"+Math.floor(Math.random()*10000)+1;this.setState({message:url});_context2.next=5;return fetch(url);case 5:res=_context2.sent;_context2.next=8;return res.json();case 8:kitty=_context2.sent;this.setState({kittyImage:kitty.image_url,hungryZombieId:hungryZombieId});case 10:case\"end\":return _context2.stop();}}},_callee2,this);}));function componentDidMount(){return _componentDidMount.apply(this,arguments);}return componentDidMount;}()},{key:\"render\",value:function render(){return React.createElement(\"div\",null,React.createElement(\"h2\",null,\"Oh No! A Zombie! Please do not eat me!!!\"),React.createElement(\"table\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,React.createElement(ZombieCard,{zombieId:this.state.hungryZombieId,zombieName:this.props.location.state.zombieName,zombieDNA:this.props.location.state.zombieDNA,zombieLevel:this.props.location.state.zombieLevel,zombieReadyTime:this.props.location.state.zombieReadyTime,zombieWinCount:this.props.location.state.zombieWinCount,zombieLossCount:this.props.location.state.zombieLossCount,zombieOwner:this.props.userAddress,myOwner:false})),React.createElement(\"th\",null,React.createElement(\"img\",{src:this.state.kittyImage,width:\"400px\",alt:\"CryptoKitty Victim\"})))),React.createElement(\"br\",null),React.createElement(Form,{onSubmit:this.onSubmit,error:!!this.state.errorMessage},React.createElement(Message,{error:true,header:\"Oops!\",content:this.state.errorMessage}),React.createElement(Button,{primary:true,type:\"submit\",loading:this.state.loading},React.createElement(Icon,{name:\"check\"}),\"Eat CryptoKitty\"),React.createElement(Link,{to:\"/MyZombieInventory\"},React.createElement(Button,{color:\"red\",inverted:true},React.createElement(Icon,{name:\"cancel\"}),\" Close\")),React.createElement(\"hr\",null),React.createElement(\"h2\",null,this.state.message)));}}]);return FeedOnKitty;}(Component);export default connect(mapStateToProps)(FeedOnKitty);","map":{"version":3,"sources":["/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/src/pages/FeedOnKitty.js"],"names":["React","Component","Link","connect","Button","Icon","Form","Message","ZombieCard","getZombieCount","mapStateToProps","state","CZ","userAddress","FeedOnKitty","value","message","errorMessage","loading","kittyImage","hungryZombieId","zombieName","zombieDNA","onSubmit","event","preventDefault","setState","props","feedOnKitty","location","zombieId","url","Math","floor","random","fetch","res","json","kitty","image_url","zombieLevel","zombieReadyTime","zombieWinCount","zombieLossCount"],"mappings":"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","sourcesContent":["//\n// This is the \"Feed On Random Cryptokitty\" page\n//\n\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Button, Icon, Form, Message } from \"semantic-ui-react\";\nimport ZombieCard from \"../components/zombieCard\";\nimport getZombieCount from \"../utils/getZombieCount\";\n\nfunction mapStateToProps(state) {\n  return {\n    CZ: state.CZ,\n    userAddress: state.userAddress\n  };\n}\n\nclass FeedOnKitty extends Component {\n  state = {\n    value: \"\",\n    message: \"\",\n    errorMessage: \"\",\n    loading: false,\n    kittyImage: \"\",\n    hungryZombieId: null,\n    zombieName: \"\",\n    zombieDNA: 0\n  };\n\n  // get a random cryptokitty image and the hungry zombie ID when the component mounts\n\n  async componentDidMount() {\n    let hungryZombieId = +this.props.location.state.zombieId;\n    let url =\n      \"https://api.cryptokitties.co/kitties/\" +\n      Math.floor(Math.random() * 10000) +\n      1;\n    this.setState({ message: url });\n    const res = await fetch(url);\n    const kitty = await res.json();\n    this.setState({\n      kittyImage: kitty.image_url,\n      hungryZombieId\n    });\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n    this.setState({\n      loading: true,\n      errorMessage: \"\",\n      message: \"waiting for blockchain transaction to complete...\"\n    });\n    try {\n      await this.props.CZ.feedOnKitty(this.state.hungryZombieId, 0) // contains the zombie ID and a 0 for kitty ID since contract is random\n      this.setState({\n        loading: false,\n        message: \"You have eaten a poor innocent CryptoKitty.   Buuuuurrrrpp!!!\"\n      });\n      getZombieCount(this.props.CZ, this.props.userAddress);\n    } catch (err) {\n      this.setState({\n        loading: false,\n        errorMessage: err.message,\n        message: \"User rejected transaction\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        {/*<Header icon=\"browser\" content=\"Feed on Random CryptoKitty\" /> */}\n        <h2>Oh No! A Zombie! Please do not eat me!!!</h2>\n        <table>\n          <tr>\n            <th>\n              <ZombieCard\n                zombieId={this.state.hungryZombieId}\n                zombieName={this.props.location.state.zombieName}\n                zombieDNA={this.props.location.state.zombieDNA}\n                zombieLevel={this.props.location.state.zombieLevel}\n                zombieReadyTime={this.props.location.state.zombieReadyTime}\n                zombieWinCount={this.props.location.state.zombieWinCount}\n                zombieLossCount={this.props.location.state.zombieLossCount}\n                zombieOwner={this.props.userAddress}\n                myOwner={false}\n              />\n            </th>\n            <th>\n              <img src={this.state.kittyImage} width=\"400px\" alt=\"CryptoKitty Victim\" />\n            </th>\n          </tr>\n        </table>\n        <br />\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\n          <Button primary type=\"submit\" loading={this.state.loading}>\n            <Icon name=\"check\" />\n            Eat CryptoKitty\n          </Button>\n          <Link to=\"/MyZombieInventory\">\n            <Button color=\"red\" inverted>\n              <Icon name=\"cancel\" /> Close\n            </Button>\n          </Link>\n          <hr />\n          <h2>{this.state.message}</h2>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(FeedOnKitty);\n"]},"metadata":{},"sourceType":"module"}