{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/inherits\";//\n// This is the \"Attack Zombie\" page\n//\nimport React,{Component}from\"react\";import{Link}from\"react-router-dom\";import{connect}from\"react-redux\";import{Button,Header,Icon,Form,Message}from\"semantic-ui-react\";import ZombieCard from\"../components/zombieCard\";import getZombieCount from\"../utils/getZombieCount\";function mapStateToProps(state){return{CZ:state.CZ,userAddress:state.userAddress};}var AttackZombie=/*#__PURE__*/function(_Component){_inherits(AttackZombie,_Component);function AttackZombie(){var _getPrototypeOf2;var _this;_classCallCheck(this,AttackZombie);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(AttackZombie)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={value:\"\",message:\"\",errorMessage:\"\",loading:false,zombieId:null};_this.onSubmit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){var newZombie;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();_this.setState({loading:true,errorMessage:\"\",message:\"waiting for blockchain transaction to complete...\"});_context.prev=2;_context.next=5;return _this.props.CZ.attack(_this.state.zombieId,_this.state.value);case 5:_context.next=7;return _this.props.CZ.zombies(_this.state.zombieId);case 7:newZombie=_context.sent;if(_this.state.zombieLevel<newZombie.level){_this.setState({loading:false,message:\"Battle complete.  YOU WON!!!!\"});getZombieCount(_this.props.CZ,_this.props.userAddress);}else{_this.setState({loading:false,message:\"Battle complete.  WAHHHH.  YOU LOST!!!!\"});}_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](2);_this.setState({loading:false,errorMessage:_context.t0.message,message:\"User rejected transaction or Cool Down period has not expired.\"});case 14:case\"end\":return _context.stop();}}},_callee,null,[[2,11]]);}));return function(_x){return _ref.apply(this,arguments);};}();return _this;}_createClass(AttackZombie,[{key:\"componentDidMount\",// get a random cryptokitty image and the hungry zombie ID when the component mounts\nvalue:function(){var _componentDidMount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var zombieId,zombieLevel;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:zombieId=+this.props.location.state.zombieId;zombieLevel=+this.props.location.state.zombieLevel;this.setState({zombieId:zombieId,zombieLevel:zombieLevel});case 3:case\"end\":return _context2.stop();}}},_callee2,this);}));function componentDidMount(){return _componentDidMount.apply(this,arguments);}return componentDidMount;}()},{key:\"render\",value:function render(){var _this2=this;return React.createElement(\"div\",null,\"*\",React.createElement(Header,{icon:\"browser\",content:\"Enter opponent zombie ID!  If you win you bump up a level and create a new zombie !\"}),React.createElement(\"table\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,React.createElement(ZombieCard,{zombieId:this.state.zombieId,zombieName:this.props.location.state.zombieName,zombieDNA:this.props.location.state.zombieDNA,zombieLevel:this.props.location.state.zombieLevel,zombieReadyTime:this.props.location.state.zombieReadyTime,zombieWinCount:this.props.location.state.zombieWinCount,zombieLossCount:this.props.location.state.zombieLossCount,zombieOwner:this.props.userAddress,myOwner:false})),React.createElement(\"th\",null,\" \",React.createElement(\"h2\",null,\" \\xA0 \\xA0 Bite Me! \\xA0 \\xA0 \")),React.createElement(\"th\",null,React.createElement(\"img\",{src:\"static/images/zombieWinner3.jpg\",width:\"300px\",alt:\"zombie\"})))),React.createElement(\"br\",null),React.createElement(Form,{onSubmit:this.onSubmit,error:!!this.state.errorMessage},React.createElement(Form.Field,null,React.createElement(\"label\",null,\"Opponent Zombie Id Number\"),React.createElement(\"input\",{placeholder:\"Zombie ID #\",onChange:function onChange(event){return _this2.setState({value:event.target.value});}})),React.createElement(Message,{error:true,header:\"Oops!\",content:this.state.errorMessage}),React.createElement(Button,{primary:true,type:\"submit\",loading:this.state.loading},React.createElement(Icon,{name:\"check\"}),\"Attack Zombie\"),React.createElement(Link,{to:\"/MyZombieInventory\"},React.createElement(Button,{color:\"red\",inverted:true},React.createElement(Icon,{name:\"cancel\"}),\" Close\")),React.createElement(\"hr\",null),React.createElement(\"h2\",null,this.state.message)));}}]);return AttackZombie;}(Component);export default connect(mapStateToProps)(AttackZombie);","map":{"version":3,"sources":["/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/src/pages/AttackZombie.js"],"names":["React","Component","Link","connect","Button","Header","Icon","Form","Message","ZombieCard","getZombieCount","mapStateToProps","state","CZ","userAddress","AttackZombie","value","message","errorMessage","loading","zombieId","onSubmit","event","preventDefault","setState","props","attack","zombies","newZombie","zombieLevel","level","location","zombieName","zombieDNA","zombieReadyTime","zombieWinCount","zombieLossCount","target"],"mappings":"0qCAAA;AACA;AACA;AAEA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,MAAT,CAAiBC,MAAjB,CAAyBC,IAAzB,CAA+BC,IAA/B,CAAqCC,OAArC,KAAoD,mBAApD,CACA,MAAOC,CAAAA,UAAP,KAAuB,0BAAvB,CACA,MAAOC,CAAAA,cAAP,KAA2B,yBAA3B,CAEA,QAASC,CAAAA,eAAT,CAAyBC,KAAzB,CAAgC,CAC9B,MAAO,CACLC,EAAE,CAAED,KAAK,CAACC,EADL,CAELC,WAAW,CAAEF,KAAK,CAACE,WAFd,CAAP,CAID,C,GAEKC,CAAAA,Y,uZACJH,K,CAAQ,CACNI,KAAK,CAAE,EADD,CAENC,OAAO,CAAE,EAFH,CAGNC,YAAY,CAAE,EAHR,CAINC,OAAO,CAAE,KAJH,CAKNC,QAAQ,CAAE,IALJ,C,OAmBRC,Q,0FAAW,iBAAMC,KAAN,gIACTA,KAAK,CAACC,cAAN,GACA,MAAKC,QAAL,CAAc,CACZL,OAAO,CAAE,IADG,CAEZD,YAAY,CAAE,EAFF,CAGZD,OAAO,CAAE,mDAHG,CAAd,EAFS,sCAQD,OAAKQ,KAAL,CAAWZ,EAAX,CACHa,MADG,CACI,MAAKd,KAAL,CAAWQ,QADf,CACyB,MAAKR,KAAL,CAAWI,KADpC,CARC,8BAUe,OAAKS,KAAL,CAAWZ,EAAX,CACnBc,OADmB,CACX,MAAKf,KAAL,CAAWQ,QADA,CAVf,QAUHQ,SAVG,eAaP,GAAI,MAAKhB,KAAL,CAAWiB,WAAX,CAAyBD,SAAS,CAACE,KAAvC,CAA8C,CAC5C,MAAKN,QAAL,CAAc,CACZL,OAAO,CAAE,KADG,CAEZF,OAAO,CAAE,+BAFG,CAAd,EAIAP,cAAc,CAAC,MAAKe,KAAL,CAAWZ,EAAZ,CAAgB,MAAKY,KAAL,CAAWX,WAA3B,CAAd,CACD,CAND,IAMO,CACL,MAAKU,QAAL,CAAc,CACZL,OAAO,CAAE,KADG,CAEZF,OAAO,CAAE,yCAFG,CAAd,EAID,CAxBM,iFA0BP,MAAKO,QAAL,CAAc,CACZL,OAAO,CAAE,KADG,CAEZD,YAAY,CAAE,YAAID,OAFN,CAGZA,OAAO,CACL,gEAJU,CAAd,EA1BO,qE,iIAXX;iQAGMG,Q,CAAW,CAAC,KAAKK,KAAL,CAAWM,QAAX,CAAoBnB,KAApB,CAA0BQ,Q,CACtCS,W,CAAc,CAAC,KAAKJ,KAAL,CAAWM,QAAX,CAAoBnB,KAApB,CAA0BiB,W,CAC7C,KAAKL,QAAL,CAAc,CACZJ,QAAQ,CAARA,QADY,CAEZS,WAAW,CAAXA,WAFY,CAAd,E,iNAyCO,iBACP,MACE,oCAEE,oBAAC,MAAD,EACE,IAAI,CAAC,SADP,CAEE,OAAO,CAAC,qFAFV,EAFF,CAME,iCACE,8BACE,8BACE,oBAAC,UAAD,EACE,QAAQ,CAAE,KAAKjB,KAAL,CAAWQ,QADvB,CAEE,UAAU,CAAE,KAAKK,KAAL,CAAWM,QAAX,CAAoBnB,KAApB,CAA0BoB,UAFxC,CAGE,SAAS,CAAE,KAAKP,KAAL,CAAWM,QAAX,CAAoBnB,KAApB,CAA0BqB,SAHvC,CAIE,WAAW,CAAE,KAAKR,KAAL,CAAWM,QAAX,CAAoBnB,KAApB,CAA0BiB,WAJzC,CAKE,eAAe,CAAE,KAAKJ,KAAL,CAAWM,QAAX,CAAoBnB,KAApB,CAA0BsB,eAL7C,CAME,cAAc,CAAE,KAAKT,KAAL,CAAWM,QAAX,CAAoBnB,KAApB,CAA0BuB,cAN5C,CAOE,eAAe,CAAE,KAAKV,KAAL,CAAWM,QAAX,CAAoBnB,KAApB,CAA0BwB,eAP7C,CAQE,WAAW,CAAE,KAAKX,KAAL,CAAWX,WAR1B,CASE,OAAO,CAAE,KATX,EADF,CADF,CAcE,8BACG,GADH,CAEE,+DAFF,CAdF,CAkBE,8BACE,2BACE,GAAG,CAAC,iCADN,CAEE,KAAK,CAAC,OAFR,CAGE,GAAG,CAAC,QAHN,EADF,CAlBF,CADF,CANF,CAkCE,8BAlCF,CAmCE,oBAAC,IAAD,EAAM,QAAQ,CAAE,KAAKO,QAArB,CAA+B,KAAK,CAAE,CAAC,CAAC,KAAKT,KAAL,CAAWM,YAAnD,EACE,oBAAC,IAAD,CAAM,KAAN,MACE,6DADF,CAEE,6BACE,WAAW,CAAC,aADd,CAEE,QAAQ,CAAE,kBAAAI,KAAK,QACb,CAAA,MAAI,CAACE,QAAL,CAAc,CACZR,KAAK,CAAEM,KAAK,CAACe,MAAN,CAAarB,KADR,CAAd,CADa,EAFjB,EAFF,CADF,CAYE,oBAAC,OAAD,EAAS,KAAK,KAAd,CAAe,MAAM,CAAC,OAAtB,CAA8B,OAAO,CAAE,KAAKJ,KAAL,CAAWM,YAAlD,EAZF,CAaE,oBAAC,MAAD,EAAQ,OAAO,KAAf,CAAgB,IAAI,CAAC,QAArB,CAA8B,OAAO,CAAE,KAAKN,KAAL,CAAWO,OAAlD,EACE,oBAAC,IAAD,EAAM,IAAI,CAAC,OAAX,EADF,iBAbF,CAiBE,oBAAC,IAAD,EAAM,EAAE,CAAC,oBAAT,EACE,oBAAC,MAAD,EAAQ,KAAK,CAAC,KAAd,CAAoB,QAAQ,KAA5B,EACE,oBAAC,IAAD,EAAM,IAAI,CAAC,QAAX,EADF,UADF,CAjBF,CAsBE,8BAtBF,CAuBE,8BAAK,KAAKP,KAAL,CAAWK,OAAhB,CAvBF,CAnCF,CADF,CA+DD,C,0BAvHwBhB,S,EA0H3B,cAAeE,CAAAA,OAAO,CAACQ,eAAD,CAAP,CAAyBI,YAAzB,CAAf","sourcesContent":["//\n// This is the \"Attack Zombie\" page\n//\n\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Button, Header, Icon, Form, Message } from \"semantic-ui-react\";\nimport ZombieCard from \"../components/zombieCard\";\nimport getZombieCount from \"../utils/getZombieCount\";\n\nfunction mapStateToProps(state) {\n  return {\n    CZ: state.CZ,\n    userAddress: state.userAddress\n  };\n}\n\nclass AttackZombie extends Component {\n  state = {\n    value: \"\",\n    message: \"\",\n    errorMessage: \"\",\n    loading: false,\n    zombieId: null\n  };\n\n  // get a random cryptokitty image and the hungry zombie ID when the component mounts\n\n  async componentDidMount() {\n    let zombieId = +this.props.location.state.zombieId;\n    let zombieLevel = +this.props.location.state.zombieLevel;\n    this.setState({\n      zombieId,\n      zombieLevel\n    });\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n    this.setState({\n      loading: true,\n      errorMessage: \"\",\n      message: \"waiting for blockchain transaction to complete...\"\n    });\n    try {\n      await this.props.CZ\n        .attack(this.state.zombieId, this.state.value) // contains the zombie ID and the target zombie ID\n      let newZombie = await this.props.CZ\n        .zombies(this.state.zombieId)\n\n      if (this.state.zombieLevel < newZombie.level) {\n        this.setState({\n          loading: false,\n          message: \"Battle complete.  YOU WON!!!!\"\n        });\n        getZombieCount(this.props.CZ, this.props.userAddress);\n      } else {\n        this.setState({\n          loading: false,\n          message: \"Battle complete.  WAHHHH.  YOU LOST!!!!\"\n        });\n      }\n    } catch (err) {\n      this.setState({\n        loading: false,\n        errorMessage: err.message,\n        message:\n          \"User rejected transaction or Cool Down period has not expired.\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        *\n        <Header\n          icon=\"browser\"\n          content=\"Enter opponent zombie ID!  If you win you bump up a level and create a new zombie !\"\n        />\n        <table>\n          <tr>\n            <th>\n              <ZombieCard\n                zombieId={this.state.zombieId}\n                zombieName={this.props.location.state.zombieName}\n                zombieDNA={this.props.location.state.zombieDNA}\n                zombieLevel={this.props.location.state.zombieLevel}\n                zombieReadyTime={this.props.location.state.zombieReadyTime}\n                zombieWinCount={this.props.location.state.zombieWinCount}\n                zombieLossCount={this.props.location.state.zombieLossCount}\n                zombieOwner={this.props.userAddress}\n                myOwner={false}\n              />\n            </th>\n            <th>\n              {\" \"}\n              <h2> &nbsp; &nbsp; Bite Me! &nbsp; &nbsp; </h2>\n            </th>\n            <th>\n              <img\n                src=\"static/images/zombieWinner3.jpg\"\n                width=\"300px\"\n                alt=\"zombie\"\n              />\n            </th>\n          </tr>\n        </table>\n        <br />\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n          <Form.Field>\n            <label>Opponent Zombie Id Number</label>\n            <input\n              placeholder=\"Zombie ID #\"\n              onChange={event =>\n                this.setState({\n                  value: event.target.value\n                })\n              }\n            />\n          </Form.Field>\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\n          <Button primary type=\"submit\" loading={this.state.loading}>\n            <Icon name=\"check\" />\n            Attack Zombie\n          </Button>\n          <Link to=\"/MyZombieInventory\">\n            <Button color=\"red\" inverted>\n              <Icon name=\"cancel\" /> Close\n            </Button>\n          </Link>\n          <hr />\n          <h2>{this.state.message}</h2>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(AttackZombie);\n"]},"metadata":{},"sourceType":"module"}