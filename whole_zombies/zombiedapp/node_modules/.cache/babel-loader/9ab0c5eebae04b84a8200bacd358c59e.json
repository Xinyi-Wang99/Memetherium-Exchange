{"ast":null,"code":"import _classCallCheck from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import{Icon,Card,Header,Modal,Button}from\"semantic-ui-react\";import ReactTooltip from\"react-tooltip\";import ActionButton from\"./ActionButton\";import ZombieCardContent from\"./zombieCardContent\";var ZombieCard=/*#__PURE__*/function(_Component){_inherits(ZombieCard,_Component);function ZombieCard(){var _getPrototypeOf2;var _this;_classCallCheck(this,ZombieCard);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(ZombieCard)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={modalOpen:false};_this.handleClose=function(){return _this.setState({modalOpen:false});};_this.truncate=function(text,startChars,endChars){if(text.length>12){var start=text.substring(0,startChars);var end=text.substring(text.length-endChars,text.length);return start+\"...\"+end;}return text;};return _this;}_createClass(ZombieCard,[{key:\"modalOpen\",value:function modalOpen(){this.setState({modalOpen:true});}},{key:\"render\",value:function render(){var _this2=this;// define the button labels used in <ActionButton> further on down in the code\nvar attackButton=React.createElement(\"div\",null,\" \",\"Attack Zombie \",React.createElement(\"br\",null),\" (70% chance of winning)\",\" \");var kittyButton=React.createElement(\"div\",null,\"Eat CryptoKitty \",React.createElement(\"br\",null),\" (burp!)\",\" \");var changeNameButton=React.createElement(\"div\",null,\"Change Name \",React.createElement(\"br\",null),\" (level > 2)\",\" \");var levelUpButton=React.createElement(\"div\",null,\"Level Up\",React.createElement(\"br\",null),\" (cost = .001 eth)\",\" \");var transferZombieButton=React.createElement(\"div\",null,\"Transfer Zombie\",React.createElement(\"br\",null),\" to New Owner\",\" \");// create the JSX depending on whether you own the zombie or not\nif(this.props.myOwner)// Owner zombie: render card and tooltip and modal for zombie actions\nreturn React.createElement(Card,{style:{backgroundColor:\"LightYellow\"},raised:true},React.createElement(ReactTooltip,{delayShow:400}),React.createElement(\"a\",{href:\"javascript:;\",\"data-tip\":\"Click on me to view actions for this zombie\",onClick:function onClick(e){return _this2.modalOpen(e);}},React.createElement(ZombieCardContent,{zombie:this.props})),React.createElement(Modal,{open:this.state.modalOpen,onClose:this.handleClose},React.createElement(Header,{icon:\"browser\",content:\"These are the actions you can take with your zombie!\"}),React.createElement(Modal.Content,null,React.createElement(ActionButton,{pathname:\"/AttackZombie\",buttonLabel:attackButton,data:this.props}),React.createElement(ActionButton,{pathname:\"/FeedOnKitty\",buttonLabel:kittyButton,data:this.props}),React.createElement(ActionButton,{pathname:\"/ChangeName\",buttonLabel:changeNameButton,disableMe:this.props.zombieLevel<=2,data:this.props}),React.createElement(ActionButton,{pathname:\"/LevelUp\",buttonLabel:levelUpButton,data:this.props}),React.createElement(ActionButton,{pathname:\"/TransferZombie\",buttonLabel:transferZombieButton,data:this.props})),React.createElement(Modal.Actions,null,React.createElement(Button,{color:\"red\",onClick:this.handleClose,inverted:true},React.createElement(Icon,{name:\"cancel\"}),\" Close\"))));// someone else's zombie.  just show the card.\nelse return React.createElement(Card,{style:{backgroundColor:\"LavenderBlush\"}},React.createElement(ZombieCardContent,{zombie:this.props}));}}]);return ZombieCard;}(Component);export default ZombieCard;","map":{"version":3,"sources":["/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/src/components/zombieCard.js"],"names":["React","Component","Icon","Card","Header","Modal","Button","ReactTooltip","ActionButton","ZombieCardContent","ZombieCard","state","modalOpen","handleClose","setState","truncate","text","startChars","endChars","length","start","substring","end","attackButton","kittyButton","changeNameButton","levelUpButton","transferZombieButton","props","myOwner","backgroundColor","e","zombieLevel"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Icon, Card, Header, Modal, Button } from \"semantic-ui-react\";\nimport ReactTooltip from \"react-tooltip\";\nimport ActionButton from \"./ActionButton\";\nimport ZombieCardContent from \"./zombieCardContent\";\n\nclass ZombieCard extends Component {\n  state = {\n    modalOpen: false\n  };\n\n  modalOpen() {\n    this.setState({ modalOpen: true });\n  }\n\n  handleClose = () => this.setState({ modalOpen: false });\n\n  truncate = (text, startChars, endChars) => {\n    if (text.length > 12) {\n      var start = text.substring(0, startChars);\n      var end = text.substring(text.length - endChars, text.length);\n      return start + \"...\" + end;\n    }\n    return text;\n  };\n\n  render() {\n    // define the button labels used in <ActionButton> further on down in the code\n\n    const attackButton = (\n      <div>\n        {\" \"}\n        Attack Zombie <br /> (70% chance of winning){\" \"}\n      </div>\n    );\n    const kittyButton = (\n      <div>\n        Eat CryptoKitty <br /> (burp!){\" \"}\n      </div>\n    );\n    const changeNameButton = (\n      <div>\n        Change Name <br /> (level > 2){\" \"}\n      </div>\n    );\n    const levelUpButton = (\n      <div>\n        Level Up\n        <br /> (cost = .001 eth){\" \"}\n      </div>\n    );\n    const transferZombieButton = (\n      <div>\n        Transfer Zombie\n        <br /> to New Owner{\" \"}\n      </div>\n    );\n\n    // create the JSX depending on whether you own the zombie or not\n\n    if (this.props.myOwner)\n      // Owner zombie: render card and tooltip and modal for zombie actions\n\n      return (\n        <Card style={{ backgroundColor: \"LightYellow\" }} raised>\n          <ReactTooltip delayShow={400} />\n\n          <a\n            href=\"javascript:;\"\n            data-tip=\"Click on me to view actions for this zombie\"\n            onClick={e => this.modalOpen(e)}\n          >\n            <ZombieCardContent zombie={this.props} />\n          </a>\n\n          {/* a modal is like an \"alert\", it's a popup that greys out the lower screen and displays its content on top of everything */}\n\n          <Modal open={this.state.modalOpen} onClose={this.handleClose}>\n            <Header\n              icon=\"browser\"\n              content=\"These are the actions you can take with your zombie!\"\n            />\n\n            <Modal.Content>\n              <ActionButton\n                pathname=\"/AttackZombie\"\n                buttonLabel={attackButton}\n                data={this.props}\n              />\n\n              <ActionButton\n                pathname=\"/FeedOnKitty\"\n                buttonLabel={kittyButton}\n                data={this.props}\n              />\n\n              <ActionButton\n                pathname=\"/ChangeName\"\n                buttonLabel={changeNameButton}\n                disableMe={this.props.zombieLevel <= 2}\n                data={this.props}\n              />\n\n              <ActionButton\n                pathname=\"/LevelUp\"\n                buttonLabel={levelUpButton}\n                data={this.props}\n              />\n\n              <ActionButton\n                pathname=\"/TransferZombie\"\n                buttonLabel={transferZombieButton}\n                data={this.props}\n              />\n            </Modal.Content>\n\n            <Modal.Actions>\n              <Button color=\"red\" onClick={this.handleClose} inverted>\n                <Icon name=\"cancel\" /> Close\n              </Button>\n            </Modal.Actions>\n          </Modal>\n        </Card>\n      );\n    // someone else's zombie.  just show the card.\n    else\n      return (\n        <Card style={{ backgroundColor: \"LavenderBlush\" }}>\n          <ZombieCardContent zombie={this.props} />\n        </Card>\n      );\n  }\n}\n\nexport default ZombieCard;\n"]},"metadata":{},"sourceType":"module"}