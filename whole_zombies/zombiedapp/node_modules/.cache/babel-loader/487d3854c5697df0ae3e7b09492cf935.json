{"ast":null,"code":"var _jsxFileName = \"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/src/components/zombieCard.js\";\nimport React, { Component } from \"react\";\nimport { Icon, Card, Header, Modal, Button } from \"semantic-ui-react\";\nimport ReactTooltip from \"react-tooltip\";\nimport ActionButton from \"./ActionButton\";\nimport ZombieCardContent from \"./zombieCardContent\";\n\nclass ZombieCard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modalOpen: false\n    };\n\n    this.handleClose = () => this.setState({\n      modalOpen: false\n    });\n\n    this.truncate = (text, startChars, endChars) => {\n      if (text.length > 12) {\n        var start = text.substring(0, startChars);\n        var end = text.substring(text.length - endChars, text.length);\n        return start + \"...\" + end;\n      }\n\n      return text;\n    };\n  }\n\n  modalOpen() {\n    this.setState({\n      modalOpen: true\n    });\n  }\n\n  render() {\n    // define the button labels used in <ActionButton> further on down in the code\n    const attackButton = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \" \", \"Attack Zombie \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), \" (70% chance of winning)\", \" \");\n    const kittyButton = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Eat CryptoKitty \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), \" (burp!)\", \" \");\n    const changeNameButton = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Change Name \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), \" (level > 2)\", \" \");\n    const levelUpButton = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Level Up\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), \" (cost = .001 eth)\", \" \"); // create the JSX depending on whether you own the zombie or not\n\n    if (this.props.myOwner) // Owner zombie: render card and tooltip and modal for zombie actions\n      return React.createElement(Card, {\n        style: {\n          backgroundColor: \"LightYellow\"\n        },\n        raised: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(ReactTooltip, {\n        delayShow: 400,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(\"a\", {\n        href: \"javascript:;\",\n        \"data-tip\": \"Click on me to view actions for this zombie\",\n        onClick: e => this.modalOpen(e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(ZombieCardContent, {\n        zombie: this.props,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      })), React.createElement(Modal, {\n        open: this.state.modalOpen,\n        onClose: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Header, {\n        icon: \"browser\",\n        content: \"These are the actions you can take with your zombie!\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(Modal.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(ActionButton, {\n        pathname: \"/AttackZombie\",\n        buttonLabel: attackButton,\n        data: this.props,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(ActionButton, {\n        pathname: \"/FeedOnKitty\",\n        buttonLabel: kittyButton,\n        data: this.props,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(ActionButton, {\n        pathname: \"/ChangeName\",\n        buttonLabel: changeNameButton,\n        disableMe: this.props.zombieLevel <= 2,\n        data: this.props,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(ActionButton, {\n        pathname: \"/LevelUp\",\n        buttonLabel: levelUpButton,\n        data: this.props,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      })), React.createElement(Modal.Actions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"red\",\n        onClick: this.handleClose,\n        inverted: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"cancel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), \" Close\")))); // someone else's zombie.  just show the card.\n    else return React.createElement(Card, {\n        style: {\n          backgroundColor: \"LavenderBlush\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(ZombieCardContent, {\n        zombie: this.props,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }));\n  }\n\n}\n\nexport default ZombieCard;","map":{"version":3,"sources":["/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/src/components/zombieCard.js"],"names":["React","Component","Icon","Card","Header","Modal","Button","ReactTooltip","ActionButton","ZombieCardContent","ZombieCard","state","modalOpen","handleClose","setState","truncate","text","startChars","endChars","length","start","substring","end","render","attackButton","kittyButton","changeNameButton","levelUpButton","props","myOwner","backgroundColor","e","zombieLevel"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Icon, Card, Header, Modal, Button } from \"semantic-ui-react\";\nimport ReactTooltip from \"react-tooltip\";\nimport ActionButton from \"./ActionButton\";\nimport ZombieCardContent from \"./zombieCardContent\";\n\nclass ZombieCard extends Component {\n  state = {\n    modalOpen: false\n  };\n\n  modalOpen() {\n    this.setState({ modalOpen: true });\n  }\n\n  handleClose = () => this.setState({ modalOpen: false });\n\n  truncate = (text, startChars, endChars) => {\n    if (text.length > 12) {\n      var start = text.substring(0, startChars);\n      var end = text.substring(text.length - endChars, text.length);\n      return start + \"...\" + end;\n    }\n    return text;\n  };\n\n  render() {\n    // define the button labels used in <ActionButton> further on down in the code\n\n    const attackButton = (\n      <div>\n        {\" \"}\n        Attack Zombie <br /> (70% chance of winning){\" \"}\n      </div>\n    );\n    const kittyButton = (\n      <div>\n        Eat CryptoKitty <br /> (burp!){\" \"}\n      </div>\n    );\n    const changeNameButton = (\n      <div>\n        Change Name <br /> (level > 2){\" \"}\n      </div>\n    );\n    const levelUpButton = (\n      <div>\n        Level Up\n        <br /> (cost = .001 eth){\" \"}\n      </div>\n    );\n\n    // create the JSX depending on whether you own the zombie or not\n\n    if (this.props.myOwner)\n      // Owner zombie: render card and tooltip and modal for zombie actions\n\n      return (\n        <Card style={{ backgroundColor: \"LightYellow\" }} raised>\n          <ReactTooltip delayShow={400} />\n\n          <a\n            href=\"javascript:;\"\n            data-tip=\"Click on me to view actions for this zombie\"\n            onClick={e => this.modalOpen(e)}\n          >\n            <ZombieCardContent zombie={this.props} />\n          </a>\n\n          {/* a modal is like an \"alert\", it's a popup that greys out the lower screen and displays its content on top of everything */}\n\n          <Modal open={this.state.modalOpen} onClose={this.handleClose}>\n            <Header\n              icon=\"browser\"\n              content=\"These are the actions you can take with your zombie!\"\n            />\n\n            <Modal.Content>\n              <ActionButton\n                pathname=\"/AttackZombie\"\n                buttonLabel={attackButton}\n                data={this.props}\n              />\n\n              <ActionButton\n                pathname=\"/FeedOnKitty\"\n                buttonLabel={kittyButton}\n                data={this.props}\n              />\n\n              <ActionButton\n                pathname=\"/ChangeName\"\n                buttonLabel={changeNameButton}\n                disableMe={this.props.zombieLevel <= 2}\n                data={this.props}\n              />\n\n              <ActionButton\n                pathname=\"/LevelUp\"\n                buttonLabel={levelUpButton}\n                data={this.props}\n              />\n                  \n            </Modal.Content>\n\n            <Modal.Actions>\n              <Button color=\"red\" onClick={this.handleClose} inverted>\n                <Icon name=\"cancel\" /> Close\n              </Button>\n            </Modal.Actions>\n          </Modal>\n        </Card>\n      );\n    // someone else's zombie.  just show the card.\n    else\n      return (\n        <Card style={{ backgroundColor: \"LavenderBlush\" }}>\n          <ZombieCardContent zombie={this.props} />\n        </Card>\n      );\n  }\n}\n\nexport default ZombieCard;\n"]},"metadata":{},"sourceType":"module"}