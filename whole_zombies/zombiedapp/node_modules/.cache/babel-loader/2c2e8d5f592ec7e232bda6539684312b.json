{"ast":null,"code":"var _jsxFileName = \"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/src/pages/FeedOnKitty.js\";\n//\n// This is the \"Feed On Random Cryptokitty\" page\n//\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Button, Icon, Form, Message } from \"semantic-ui-react\";\nimport ZombieCard from \"../components/zombieCard\";\nimport getZombieCount from \"../utils/getZombieCount\";\n\nfunction mapStateToProps(state) {\n  return {\n    CZ: state.CZ,\n    userAddress: state.userAddress\n  };\n}\n\nclass FeedOnKitty extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: \"\",\n      message: \"\",\n      errorMessage: \"\",\n      loading: false,\n      kittyImage: \"\",\n      hungryZombieId: null,\n      zombieName: \"\",\n      zombieDNA: 0\n    };\n\n    this.onSubmit = async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true,\n        errorMessage: \"\",\n        message: \"waiting for blockchain transaction to complete...\"\n      });\n\n      try {\n        await this.props.CZ.feedOnKitty(this.state.hungryZombieId, 0); // contains the zombie ID and a 0 for kitty ID since contract is random\n\n        this.setState({\n          loading: false,\n          message: \"You have eaten a poor innocent CryptoKitty.   Buuuuurrrrpp!!!\"\n        });\n        getZombieCount(this.props.CZ, this.props.userAddress);\n      } catch (err) {\n        this.setState({\n          loading: false,\n          errorMessage: err.message,\n          message: \"User rejected transaction\"\n        });\n      }\n    };\n  }\n\n  // get a random cryptokitty image and the hungry zombie ID when the component mounts\n  async componentDidMount() {\n    let hungryZombieId = +this.props.location.state.zombieId;\n    let url = \"https://api.cryptokitties.co/kitties/\" + Math.floor(Math.random() * 10000) + 1;\n    this.setState({\n      message: url\n    });\n    const res = await fetch(url);\n    const kitty = await res.json();\n    this.setState({\n      kittyImage: kitty.image_url,\n      hungryZombieId\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Oh No! A Zombie! Please do not eat me!!!\"), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(ZombieCard, {\n      zombieId: this.state.hungryZombieId,\n      zombieName: this.props.location.state.zombieName,\n      zombieDNA: this.props.location.state.zombieDNA,\n      zombieLevel: this.props.location.state.zombieLevel,\n      zombieReadyTime: this.props.location.state.zombieReadyTime,\n      zombieWinCount: this.props.location.state.zombieWinCount,\n      zombieLossCount: this.props.location.state.zombieLossCount,\n      zombieOwner: this.props.userAddress,\n      myOwner: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.kittyImage,\n      width: \"400px\",\n      alt: \"CryptoKitty Victim\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      error: !!this.state.errorMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.errorMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(Button, {\n      primary: true,\n      type: \"submit\",\n      loading: this.state.loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), \"Eat CryptoKitty\"), React.createElement(Link, {\n      to: \"/MyZombieInventory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"red\",\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"cancel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), \" Close\")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, this.state.message)));\n  }\n\n}\n\nexport default connect(mapStateToProps)(FeedOnKitty);","map":{"version":3,"sources":["/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/src/pages/FeedOnKitty.js"],"names":["React","Component","Link","connect","Button","Icon","Form","Message","ZombieCard","getZombieCount","mapStateToProps","state","CZ","userAddress","FeedOnKitty","value","message","errorMessage","loading","kittyImage","hungryZombieId","zombieName","zombieDNA","onSubmit","event","preventDefault","setState","props","feedOnKitty","err","componentDidMount","location","zombieId","url","Math","floor","random","res","fetch","kitty","json","image_url","render","zombieLevel","zombieReadyTime","zombieWinCount","zombieLossCount"],"mappings":"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","sourcesContent":["//\n// This is the \"Feed On Random Cryptokitty\" page\n//\n\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Button, Icon, Form, Message } from \"semantic-ui-react\";\nimport ZombieCard from \"../components/zombieCard\";\nimport getZombieCount from \"../utils/getZombieCount\";\n\nfunction mapStateToProps(state) {\n  return {\n    CZ: state.CZ,\n    userAddress: state.userAddress\n  };\n}\n\nclass FeedOnKitty extends Component {\n  state = {\n    value: \"\",\n    message: \"\",\n    errorMessage: \"\",\n    loading: false,\n    kittyImage: \"\",\n    hungryZombieId: null,\n    zombieName: \"\",\n    zombieDNA: 0\n  };\n\n  // get a random cryptokitty image and the hungry zombie ID when the component mounts\n\n  async componentDidMount() {\n    let hungryZombieId = +this.props.location.state.zombieId;\n    let url =\n      \"https://api.cryptokitties.co/kitties/\" +\n      Math.floor(Math.random() * 10000) +\n      1;\n    this.setState({ message: url });\n    const res = await fetch(url);\n    const kitty = await res.json();\n    this.setState({\n      kittyImage: kitty.image_url,\n      hungryZombieId\n    });\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n    this.setState({\n      loading: true,\n      errorMessage: \"\",\n      message: \"waiting for blockchain transaction to complete...\"\n    });\n    try {\n      await this.props.CZ.feedOnKitty(this.state.hungryZombieId, 0) // contains the zombie ID and a 0 for kitty ID since contract is random\n      this.setState({\n        loading: false,\n        message: \"You have eaten a poor innocent CryptoKitty.   Buuuuurrrrpp!!!\"\n      });\n      getZombieCount(this.props.CZ, this.props.userAddress);\n    } catch (err) {\n      this.setState({\n        loading: false,\n        errorMessage: err.message,\n        message: \"User rejected transaction\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        {/*<Header icon=\"browser\" content=\"Feed on Random CryptoKitty\" /> */}\n        <h2>Oh No! A Zombie! Please do not eat me!!!</h2>\n        <table>\n          <tr>\n            <th>\n              <ZombieCard\n                zombieId={this.state.hungryZombieId}\n                zombieName={this.props.location.state.zombieName}\n                zombieDNA={this.props.location.state.zombieDNA}\n                zombieLevel={this.props.location.state.zombieLevel}\n                zombieReadyTime={this.props.location.state.zombieReadyTime}\n                zombieWinCount={this.props.location.state.zombieWinCount}\n                zombieLossCount={this.props.location.state.zombieLossCount}\n                zombieOwner={this.props.userAddress}\n                myOwner={false}\n              />\n            </th>\n            <th>\n              <img src={this.state.kittyImage} width=\"400px\" alt=\"CryptoKitty Victim\" />\n            </th>\n          </tr>\n        </table>\n        <br />\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\n          <Button primary type=\"submit\" loading={this.state.loading}>\n            <Icon name=\"check\" />\n            Eat CryptoKitty\n          </Button>\n          <Link to=\"/MyZombieInventory\">\n            <Button color=\"red\" inverted>\n              <Icon name=\"cancel\" /> Close\n            </Button>\n          </Link>\n          <hr />\n          <h2>{this.state.message}</h2>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(FeedOnKitty);\n"]},"metadata":{},"sourceType":"module"}