{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import{Card,Grid,Input,Segment,Pagination}from\"semantic-ui-react\";import{connect}from\"react-redux\";import ZombieCard from\"../components/zombieCard\";function mapStateToProps(state){return{CZ:state.CZ,totalZombieCount:state.totalZombieCount,userAddress:state.userAddress};}var ZombieInventory=/*#__PURE__*/function(_Component){_inherits(ZombieInventory,_Component);function ZombieInventory(){var _getPrototypeOf2;var _this;_classCallCheck(this,ZombieInventory);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(ZombieInventory)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={ZombieTable:[],activePage:1,totalPages:Math.ceil(_this.props.totalZombieCount/9)};_this.componentDidMount=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _this.makeZombieCards();case 2:case\"end\":return _context.stop();}}},_callee);}));_this.onChange=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e,pageInfo){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _this.setState({activePage:pageInfo.activePage});case 2:_this.makeZombieCards();case 3:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x,_x2){return _ref2.apply(this,arguments);};}();_this.handleInputChange=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(e,_ref4){var value;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:value=_ref4.value;_context3.next=3;return _this.setState({activePage:value});case 3:_this.makeZombieCards();case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3,_x4){return _ref3.apply(this,arguments);};}();_this.makeZombieCards=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var zList,zOwner,i,metaData,myOwner,zombieTable,_i,myDate;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:zList=[];zOwner=[];_context4.next=4;return _this.setState({zombieTable:[]});case 4:i=_this.state.activePage*9-9;case 5:if(!(i<_this.state.activePage*9)){_context4.next=23;break;}_context4.prev=6;_context4.next=9;return _this.props.CZ.zombies(i);case 9:metaData=_context4.sent;zList.push(metaData);_context4.next=13;return _this.props.CZ.zombieToOwner(i);case 13:myOwner=_context4.sent;zOwner.push(myOwner);_context4.next=20;break;case 17:_context4.prev=17;_context4.t0=_context4[\"catch\"](6);return _context4.abrupt(\"break\",23);case 20:i++;_context4.next=5;break;case 23:// create a set of zombie cards in the state table\nzombieTable=[];for(_i=0;_i<zList.length;_i++){myDate=new Date(zList[_i].readyTime*1000).toLocaleString();zombieTable.push(React.createElement(ZombieCard,{key:_i,zombieId:_this.state.activePage*9-9+_i,zombieName:zList[_i].name,zombieDNA:zList[_i].dna.toString(),zombieLevel:zList[_i].level,zombieReadyTime:myDate,zombieWinCount:zList[_i].winCount,zombieLossCount:zList[_i].lossCount,zombieOwner:zOwner[_i],myOwner:_this.props.userAddress===zOwner[_i]}));}_this.setState({zombieTable:zombieTable});case 26:case\"end\":return _context4.stop();}}},_callee4,null,[[6,17]]);}));return _this;}_createClass(ZombieInventory,[{key:\"render\",value:function render(){return React.createElement(\"div\",null,React.createElement(\"hr\",null),React.createElement(\"h2\",null,\" Complete Zombie Inventory \"),\"The zombies you own have a yellow background; clicking anywhere on a yellow card will bring up a list of actions you can perform.\",React.createElement(\"hr\",null),React.createElement(Grid,{columns:2,verticalAlign:\"middle\"},React.createElement(Grid.Column,null,React.createElement(Segment,{secondary:true},React.createElement(\"div\",null,\"activePage: \",this.state.activePage),React.createElement(Input,{min:1,max:this.state.totalPages,onChange:this.handleInputChange,type:\"range\",value:this.state.activePage}))),React.createElement(Grid.Column,null,React.createElement(Pagination,{activePage:this.state.activePage,onPageChange:this.onChange,totalPages:this.state.totalPages}))),React.createElement(\"br\",null),\" \",React.createElement(\"br\",null),React.createElement(\"div\",null,React.createElement(Card.Group,null,this.state.zombieTable)));}}]);return ZombieInventory;}(Component);export default connect(mapStateToProps)(ZombieInventory);","map":{"version":3,"sources":["/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/src/pages/ZombieInventory.js"],"names":["React","Component","Card","Grid","Input","Segment","Pagination","connect","ZombieCard","mapStateToProps","state","CZ","totalZombieCount","userAddress","ZombieInventory","ZombieTable","activePage","totalPages","Math","ceil","props","componentDidMount","makeZombieCards","onChange","e","pageInfo","setState","handleInputChange","value","zList","zOwner","zombieTable","i","zombies","metaData","push","zombieToOwner","myOwner","length","myDate","Date","readyTime","toLocaleString","name","dna","toString","level","winCount","lossCount"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Card,\n  Grid,\n  Input,\n  Segment,\n  Pagination,\n} from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\n\nimport ZombieCard from \"../components/zombieCard\";\n\nfunction mapStateToProps(state) {\n  return {\n    CZ: state.CZ,\n    totalZombieCount: state.totalZombieCount,\n    userAddress: state.userAddress\n  };\n}\n\nclass ZombieInventory extends Component {\n  state = {\n    ZombieTable: [],\n    activePage: 1,\n    totalPages: Math.ceil(this.props.totalZombieCount / 9)\n  };\n\n  componentDidMount = async () => {\n    await this.makeZombieCards();\n  };\n\n  onChange = async (e, pageInfo) => {\n    await this.setState({ activePage: pageInfo.activePage });\n    this.makeZombieCards();\n  };\n\n  handleInputChange = async (e, { value }) => {\n      await this.setState({ activePage: value });\n      this.makeZombieCards();\n  }\n\n  makeZombieCards = async () => {\n    let zList = [];\n    let zOwner = [];\n    await this.setState({ zombieTable: [] }); // clear screen while waiting for data\n    for (\n      let i = this.state.activePage * 9 - 9;\n      i < this.state.activePage * 9;\n      i++\n    ) {\n      try {\n        let metaData = await this.props.CZ.zombies(i);\n        zList.push(metaData);\n        let myOwner = await this.props.CZ.zombieToOwner(i);\n        zOwner.push(myOwner);\n      } catch (err) {\n        break;\n      }\n    }\n\n    // create a set of zombie cards in the state table\n    let zombieTable = [];\n    for (let i = 0; i < zList.length; i++) {\n      let myDate = new Date(zList[i].readyTime * 1000).toLocaleString();\n      zombieTable.push(\n        <ZombieCard\n          key={i}\n          zombieId={this.state.activePage * 9 - 9 + i}\n          zombieName={zList[i].name}\n          zombieDNA={zList[i].dna.toString()}\n          zombieLevel={zList[i].level}\n          zombieReadyTime={myDate}\n          zombieWinCount={zList[i].winCount}\n          zombieLossCount={zList[i].lossCount}\n          zombieOwner={zOwner[i]}\n          myOwner={this.props.userAddress === zOwner[i]}\n        />\n      );\n    }\n    this.setState({ zombieTable });\n  };\n\n  render() {\n    return (\n      <div>\n        <hr />\n        <h2> Complete Zombie Inventory </h2>\n        The zombies you own have a yellow background; clicking anywhere on a\n        yellow card will bring up a list of actions you can perform.\n        <hr />\n        <Grid columns={2} verticalAlign=\"middle\">\n          <Grid.Column>\n            <Segment secondary>\n              <div>activePage: {this.state.activePage}</div>\n              <Input\n                min={1}\n                max={this.state.totalPages}\n                onChange={this.handleInputChange}\n                type=\"range\"\n                value={this.state.activePage}\n              />\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            <Pagination\n              activePage={this.state.activePage}\n              onPageChange={this.onChange}\n              totalPages={this.state.totalPages}\n            />\n          </Grid.Column>\n        </Grid>\n        <br /> <br />\n        <div>\n          <Card.Group>{this.state.zombieTable}</Card.Group>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(ZombieInventory);\n"]},"metadata":{},"sourceType":"module"}