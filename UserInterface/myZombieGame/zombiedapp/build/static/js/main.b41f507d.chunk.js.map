{"version":3,"sources":["redux/modules/czAppDuck.js","redux/store.js","utils/initBlockchain.js","utils/getZombieCount.js","components/CreateZombie.js","components/TopBar.js","pages/Greeting.js","components/ActionButton.js","components/zombieChar.js","components/zombieCardContent.js","components/zombieCard.js","pages/MyZombieInventory.js","pages/ZombieInventory.js","pages/AttackZombie.js","pages/FeedOnKitty.js","pages/ChangeName.js","pages/LevelUp.js","pages/TransferZombie.js","App.js","index.js"],"names":["initialState","CZ","signer","userAddress","provider","userZombieCount","totalZombieCount","loggerMiddleware","createLogger","store","createStore","state","action","console","log","type","Object","assign","payload","applyMiddleware","thunkMiddleware","blockchainInitialized","data","initBlockchain","a","window","ethereum","enable","then","ethers","providers","Web3Provider","getSigner","getAddress","abi","JSON","parse","Contract","dispatch","zombieCount","balanceOf","high","low","middle","zombies","Math","floor","max","getZombieCount","CreateZombie","modalOpen","value","message","errorMessage","loading","handleOpen","setState","handleClose","onSubmit","event","preventDefault","props","createRandomZombie","createDisabled","this","Modal","trigger","Button","primary","disabled","onClick","open","onClose","Header","icon","content","Content","src","alt","Form","error","Field","placeholder","onChange","target","Message","header","Icon","name","Actions","color","inverted","Component","connect","TopBar","Menu","style","marginTop","backgroundColor","Item","to","pathname","position","size","className","Greeting","textAlign","display","marginLeft","marginRight","width","ActionButton","truncate","text","startChars","endChars","length","substring","zombieData","zombieName","zombieId","zombieDNA","zombieLevel","zombieReadyTime","zombieWinCount","zombieLossCount","pathName","buttonLabel","disableMe","ZombieChar","parseInt","DNA","skinStyle","filter","eyeStyle","shirtStyle","catMode","v-images-loaded","currentShirtChoice","currentHeadChoice","currentEyeChoice","ZombieCardContent","Card","zombie","Description","zombieOwner","ZombieCard","attackButton","kittyButton","changeNameButton","levelUpButton","transferZombieButton","myOwner","raised","delayShow","href","data-tip","e","MyZombieInventory","ZombieTable","activePage","totalPages","ceil","componentDidMount","makeZombieCards","pageInfo","handleInputChange","getZombiesByOwner","myZombies","zombieTable","i","z","myDate","Date","readyTime","toLocaleString","push","key","toString","dna","level","winCount","lossCount","Grid","columns","verticalAlign","Column","Segment","secondary","Input","min","Pagination","onPageChange","Group","ZombieInventory","zList","zOwner","metaData","zombieToOwner","AttackZombie","attack","newZombie","location","FeedOnKitty","kittyImage","hungryZombieId","feedOnKitty","url","random","fetch","res","json","kitty","image_url","ChangeName","changeName","LevelUp","levelUp","utils","parseEther","web3Instance","TransferZombie","transferFrom","App","CZInfo","alert","Container","exact","path","component","ReactDOM","render","document","querySelector"],"mappings":"iWA0CA,IAAMA,EAAe,CACjBC,GAAI,GACJC,OAAQ,KACRC,YAAa,EACbC,SAAU,KACVC,gBAAiB,EACjBC,iBAAkB,GC3CtB,IAAMC,EAAmBC,yBAIVC,EADDC,aDsDC,WAAgD,IAA/BC,EAA8B,uDAAtBX,EAAcY,EAAQ,uCAE5D,OADAC,QAAQC,IAAI,UAAWF,GACfA,EAAOG,MAEb,IAnD2B,yBAoDvB,OAAOC,OAAOC,OAAO,GAAIN,EAAO,CAC5BV,GAAIW,EAAOM,QAAQjB,GACnBC,OAAQU,EAAOM,QAAQhB,OACvBC,YAAaS,EAAOM,QAAQf,YAC5BC,SAAUQ,EAAOM,QAAQd,SACzBC,gBAAiBO,EAAOM,QAAQb,kBAGxC,IA3DiB,eA6Df,OADEQ,QAAQC,IAAI,0BAA2BH,GAClCK,OAAOC,OAAO,GAAIN,EAAO,CAC9BL,iBAAkBM,EAAOM,QAAQZ,iBACjCD,gBAAiBO,EAAOM,QAAQb,kBAGpC,QACE,OAAOM,KC3EsBQ,YAAgBC,IAAgBb,I,QCAnE,SAASc,EAAsBC,GAC3B,MAAO,CACHP,KAN8B,yBAO9BG,QAASI,GAOjB,IAgeeC,EAheK,uCAAG,sCAAAC,EAAA,6DAYnBC,OAAOC,SAASC,SAASC,KAAKxB,EAAW,IAAIyB,SAAOC,UAAUC,aAAaN,OAAOC,WAZ/D,SAkBEtB,EAAS4B,YAlBX,cAkBb9B,EAlBa,OAmBnBW,QAAQC,IAAI,SAAUZ,GAnBH,SAoBQA,EAAO+B,aApBf,cAoBb9B,EApBa,OAqBnBU,QAAQC,IAAI,eAAgBX,GAInB,KACTU,QAAQC,IAAI,YAENoB,EAAMC,KAAKC,MAAM,g0RA4bvBnC,EAAK,IAAI4B,SAAOQ,SAAS,6CAA8CH,EAAKhC,GAGxEoB,EAAO,CAAElB,WAAUF,SAAQD,KAAIE,eACnCM,EAAM6B,SAASjB,EAAsBC,IA5dlB,kBA6ddA,GA7dc,4CAAH,qDCbpB,SAASiB,EAAYjB,GACnB,MAAO,CACLP,KALwB,eAMxBG,QAASI,G,4CAQb,WAA8BrB,EAAIE,GAAlC,uBAAAqB,EAAA,sEAEgCvB,EAAGuC,UAAUrC,GAF7C,OAEME,GAFN,OAQMoC,EAAO,KACPC,EAAM,EACNC,EAAS,KAVf,YAYSD,EAAMD,GAZf,2CAcYxC,EAAG2C,QAAQD,GAdvB,QAeMD,EAAMC,EAAS,EACfA,EAASE,KAAKC,MAAMJ,GAAOD,EAAOC,GAAO,GAhB/C,kDAkBMD,EAAOE,EAAS,EAChBA,EAASE,KAAKC,MAAMJ,GAAOD,EAAOC,GAAO,GAnB/C,+BAyBMpB,EAAO,CACThB,iBAAkBuC,KAAKE,IAAIL,EAAI,EAAG,GAClCrC,mBAGFI,EAAM6B,SAASC,EAAYjB,IA9B7B,2D,sBAiCe0B,M,wIChCTC,E,2MACJtC,MAAQ,CACNuC,WAAW,EACXC,MAAO,GACPC,QAAS,GACTC,aAAc,GACdC,SAAS,G,EAGXC,WAAa,kBAAM,EAAKC,SAAS,CAAEN,WAAW,K,EAE9CO,YAAc,kBAAM,EAAKD,SAAS,CAAEN,WAAW,K,EAE/CQ,S,uCAAW,WAAMC,GAAN,SAAAnC,EAAA,6DACTmC,EAAMC,iBACN,EAAKJ,SAAS,CACZF,SAAS,EACTD,aAAc,GACdD,QAAS,sDALF,kBAQD,EAAKS,MAAM5D,GAAG6D,mBAAmB,EAAKnD,MAAMwC,OAR3C,OASP,EAAKK,SAAS,CACZF,SAAS,EACTF,QAAS,kCAEXJ,EAAe,EAAKa,MAAM5D,GAAI,EAAK4D,MAAM1D,aAblC,gDAeP,EAAKqD,SAAS,CACZF,SAAS,EACTD,aAAc,KAAID,QAClBA,QAAS,+FAlBJ,yD,8HAwBD,IAAD,OACHW,EAAiD,IAA/BC,KAAKH,MAAMxD,gBAC/B,OACA,kBAAC4D,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CAAQC,SAAO,EAACC,SAAUN,EAAgBO,QAASN,KAAKT,YAAxD,iBAIFgB,KAAMP,KAAKrD,MAAMuC,UACjBsB,QAASR,KAAKP,aAEd,kBAACgB,EAAA,EAAD,CAAQC,KAAK,UAAUC,QAAQ,wBAC/B,kBAACV,EAAA,EAAMW,QAAP,KACE,yBAAKC,IAAI,kCAAkCC,IAAI,mBAAmB,kBAACL,EAAA,EAAD,qDAClE,6BAFF,IAES,6BACP,kBAACM,EAAA,EAAD,CAAMrB,SAAUM,KAAKN,SAAUsB,QAAShB,KAAKrD,MAAM0C,cACjD,kBAAC0B,EAAA,EAAKE,MAAN,KACE,8CACA,2BACEC,YAAY,OACZC,SAAU,SAAAxB,GAAK,OACb,EAAKH,SAAS,CACZL,MAAOQ,EAAMyB,OAAOjC,YAK5B,kBAACkC,EAAA,EAAD,CAASL,OAAK,EAACM,OAAO,QAAQX,QAASX,KAAKrD,MAAM0C,eAClD,kBAACc,EAAA,EAAD,CAAQC,SAAO,EAACrD,KAAK,SAASuC,QAASU,KAAKrD,MAAM2C,SAChD,kBAACiC,EAAA,EAAD,CAAMC,KAAK,UADb,iBAIA,6BACA,4BAAKxB,KAAKrD,MAAMyC,WAGpB,kBAACa,EAAA,EAAMwB,QAAP,KACE,kBAACtB,EAAA,EAAD,CAAQuB,MAAM,MAAMpB,QAASN,KAAKP,YAAakC,UAAQ,GACrD,kBAACJ,EAAA,EAAD,CAAMC,KAAK,WADb,gB,GA3EiBI,aAoFZC,eA/Ff,SAAyBlF,GACrB,MAAO,CACHV,GAAIU,EAAMV,GACVE,YAAaQ,EAAMR,YACnBE,gBAAiBM,EAAMN,mBA2FhBwF,CAAyB5C,G,aCjFlC6C,E,iLAEF,OACE,6BACE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,UAAW,OAAQC,gBAAiB,WACjD,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAAC,EAAD,OAGF,kBAACJ,EAAA,EAAKI,KAAN,KACE,kBAAC,IAAD,CAAMC,GAAI,CAAEC,SAAU,uBACpB,kBAAClC,EAAA,EAAD,CAAQC,SAAO,GAAf,qBAIJ,kBAAC2B,EAAA,EAAKI,KAAN,KACE,kBAAC,IAAD,CAAMC,GAAI,CAAEC,SAAU,qBACpB,kBAAClC,EAAA,EAAD,CAAQC,SAAO,GAAf,sBAIJ,kBAAC2B,EAAA,EAAKI,KAAN,CAAWG,SAAS,SAClB,kBAAC,IAAD,CAAMF,GAAI,CAAEC,SAAU,MACpB,kBAAC5B,EAAA,EAAD,CAAQ8B,KAAK,SAAb,+BAIN,yBAAKC,UAAU,UACb,qFAzBJ,yBA2ByBxC,KAAKH,MAAM1D,YAClC,6BA5BF,WA6BW6D,KAAKH,MAAMxD,gBA7BtB,8CA6BkF2D,KAAKH,MAAMvD,iBA7B7F,IA8BE,kC,GAjCasF,aAuCNC,eAjDf,SAAyBlF,GACvB,MAAO,CACLR,YAAaQ,EAAMR,YACnBE,gBAAiBM,EAAMN,gBACvBC,iBAAkBK,EAAML,oBA6CbuF,CAAyBC,GCxBzBW,E,iLAxBX,OACE,6BACE,6BACA,wBAAIT,MAAO,CAAEN,MAAO,UAAWgB,UAAW,WACvC,IADH,sBAEqB,6CAFrB,UAIA,6BACA,yBAAK7B,IAAI,iCAAiCmB,MAf7B,CACfW,QAAS,QACTC,WAAY,OACZC,YAAa,OACbC,MAAO,OAWsDA,MAAM,QAAQhC,IAAI,6BAC7E,6BARF,IAQS,6BACP,uBAAGkB,MAAO,CAAEU,UAAW,WAAvB,4HAGE,6BAHF,0EAKE,6BALF,0FAOE,6BAPF,IAOS,6BAPT,kE,GAnBed,a,sDC4CRmB,E,2MArCbC,SAAW,SAACC,EAAMC,EAAYC,GAC5B,OAAIF,EAAKG,OAAS,GACJH,EAAKI,UAAU,EAAGH,GAEf,MADLD,EAAKI,UAAUJ,EAAKG,OAASD,EAAUF,EAAKG,QAGjDH,G,wEAIP,IAAMK,EAAa,CACjBC,WAAYvD,KAAKgD,SAAShD,KAAKH,MAAMvC,KAAKiG,WAAY,EAAG,GACzDC,SAAUxD,KAAKH,MAAMvC,KAAKkG,SAC1BC,UAAWzD,KAAKH,MAAMvC,KAAKmG,UAC3BC,YAAa1D,KAAKH,MAAMvC,KAAKoG,YAC7BC,gBAAiB3D,KAAKH,MAAMvC,KAAKqG,gBACjCC,eAAgB5D,KAAKH,MAAMvC,KAAKsG,eAChCC,gBAAiB7D,KAAKH,MAAMvC,KAAKuG,iBAG7BC,EAAW9D,KAAKH,MAAMwC,SACtB0B,EAAc/D,KAAKH,MAAMkE,YAG/B,OACE,kBAAC,IAAD,CACE3B,GAAI,CACFC,SAAWyB,EACXnH,MAAQ2G,IAGV,kBAACnD,EAAA,EAAD,CAAQC,SAAO,EAACC,SAAUL,KAAKH,MAAMmE,WAArC,IAAkDD,EAAlD,U,GAlCmBnC,aC6EZqC,G,yLA7ER,OAASC,SAASlE,KAAKH,MAAMsE,KAAO,MAAS,I,0CAK5C,MAAO,4BADED,SAASlE,KAAKH,MAAMsE,IAAId,UAAU,EAAG,IAAM,EAAI,GAChB,Y,yCAKxC,MAAO,4BADCa,SAASlE,KAAKH,MAAMsE,IAAId,UAAU,EAAG,IAAM,GAAK,GAChB,Y,2CAKxC,MAAO,6BADCa,SAASlE,KAAKH,MAAMsE,IAAId,UAAU,EAAG,IAAM,EAAI,GACd,Y,+BAKzC,IAAMe,EAAY,CACdC,OAAQ,cAAgBH,SAASlE,KAAKH,MAAMsE,IAAId,UAAU,EAAG,IAAM,IAAM,IAAM,QAG7EiB,EAAW,CACbD,OAAQ,cAAgBH,SAASlE,KAAKH,MAAMsE,IAAId,UAAU,EAAG,KAAO,IAAM,IAAM,QAG9EkB,EAAa,CACfF,OAAQ,cAAgBH,SAASlE,KAAKH,MAAMsE,IAAId,UAAU,GAAG,KAAO,IAAM,IAAM,QAGpF,OAAIrD,KAAKwE,UAED,yBAAKhC,UAAU,iBAAiBiC,kBAAgB,gBAC5C,yBAAMzC,MAAOoC,EAAW5B,UAAU,kBAAkB3B,IAAI,8CAA8CC,IAAI,oBAC1G,yBAAMkB,MAAOuC,EAAW/B,UAAU,QAAQ3B,IAAI,oCAAoCC,IAAI,UACtF,yBAAMkB,MAAOoC,EAAU5B,UAAU,WAAW3B,IAAI,iCAAiCC,IAAI,WACrF,yBAAMkB,MAAOuC,EAAY/B,UAAU,QAAQ3B,IAAKb,KAAK0E,qBAAsB5D,IAAI,UAC/E,yBAAMkB,MAAOoC,EAAW5B,UAAU,eAAe3B,IAAI,2CAA2CC,IAAI,iBACpG,yBAAMkB,MAAOoC,EAAW5B,UAAU,gBAAgB3B,IAAI,4CAA4CC,IAAI,kBACtG,yBAAMkB,MAAOoC,EAAW5B,UAAU,iBAAiB3B,IAAI,6CAA6CC,IAAI,mBACxG,yBAAMkB,MAAOoC,EAAW5B,UAAU,YAAY3B,IAAI,oCAAoCC,IAAI,cAC1F,yBAAMkB,MAAOoC,EAAW5B,UAAU,aAAa3B,IAAI,qCAAqCC,IAAI,eAC5F,yBAAMkB,MAAOoC,EAAW5B,UAAU,OAAO3B,IAAKb,KAAK2E,oBAAqB7D,IAAI,SAC5E,yBAAMkB,MAAOsC,EAAW9B,UAAU,MAAO3B,IAAKb,KAAK4E,mBAAoB9D,IAAI,SAC3E,yBAAM0B,UAAU,QAAQ3B,IAAI,oCAAoCC,IAAI,WAKxE,yBAAK0B,UAAU,iBAAiBiC,kBAAgB,gBAC5C,yBAAKzC,MAAOuC,EAAW/B,UAAU,YAAY3B,IAAI,wCAAwCC,IAAI,cAC7F,yBAAKkB,MAAOuC,EAAW/B,UAAU,aAAa3B,IAAI,yCAAyCC,IAAI,eAC/F,yBAAKkB,MAAOuC,EAAW/B,UAAU,WAAW3B,IAAI,uCAAuCC,IAAI,aAC3F,yBAAKkB,MAAOuC,EAAW/B,UAAU,YAAY3B,IAAI,wCAAwCC,IAAI,cAC7F,yBAAKkB,MAAOuC,EAAW/B,UAAU,aAAa3B,IAAI,yCAAyCC,IAAI,eAC/F,yBAAKkB,MAAOuC,EAAW/B,UAAU,cAAc3B,IAAI,0CAA0CC,IAAI,gBAEjG,yBAAMkB,MAAOoC,EAAW5B,UAAU,kBAAkB3B,IAAI,8CAA8CC,IAAI,oBAC1G,yBAAMkB,MAAOuC,EAAW/B,UAAU,QAAQ3B,IAAI,oCAAoCC,IAAI,UACtF,yBAAMkB,MAAOuC,EAAY/B,UAAU,QAAQ3B,IAAKb,KAAK0E,qBAAsB5D,IAAI,UAC/E,yBAAMkB,MAAOoC,EAAW5B,UAAU,eAAe3B,IAAI,2CAA2CC,IAAI,iBACpG,yBAAMkB,MAAOoC,EAAW5B,UAAU,gBAAgB3B,IAAI,4CAA4CC,IAAI,kBACtG,yBAAMkB,MAAOoC,EAAW5B,UAAU,iBAAiB3B,IAAI,6CAA6CC,IAAI,mBACxG,yBAAMkB,MAAOoC,EAAW5B,UAAU,YAAY3B,IAAI,oCAAoCC,IAAI,cAC1F,yBAAMkB,MAAOoC,EAAW5B,UAAU,aAAa3B,IAAI,qCAAqCC,IAAI,eAC5F,yBAAMkB,MAAOoC,EAAW5B,UAAU,OAAO3B,IAAKb,KAAK2E,oBAAqB7D,IAAI,SAC5E,yBAAMkB,MAAOsC,EAAW9B,UAAU,MAAO3B,IAAKb,KAAK4E,mBAAoB9D,IAAI,SAC3E,yBAAM0B,UAAU,QAAQ3B,IAAI,oCAAoCC,IAAI,e,GAxE/Dc,cCkCViD,E,2MAhCb7B,SAAW,SAACC,EAAMC,EAAYC,GAC5B,OAAIF,EAAKG,OAAS,GACJH,EAAKI,UAAU,EAAGH,GAEf,MADLD,EAAKI,UAAUJ,EAAKG,OAASD,EAAUF,EAAKG,QAGjDH,G,wEAIP,OACE,kBAAC6B,EAAA,EAAKlE,QAAN,KACE,6BACG,IACD,kBAAC,EAAD,CAAYuD,IAAKnE,KAAKH,MAAMkF,OAAOtB,YAAc,KAEnD,kBAACqB,EAAA,EAAKrE,OAAN,mBACa,2BAAIT,KAAKH,MAAMkF,OAAOvB,UADnC,IACiD,6BADjD,UAC+D,IAC7D,2BAAIxD,KAAKgD,SAAShD,KAAKH,MAAMkF,OAAOxB,WAAY,EAAG,KAErD,kBAACuB,EAAA,EAAKE,YAAN,aACQhF,KAAKH,MAAMkF,OAAOtB,UAD1B,IACqC,6BADrC,UAEUzD,KAAKH,MAAMkF,OAAOrB,YAF5B,IAEyC,6BAFzC,eAGe1D,KAAKH,MAAMkF,OAAOpB,gBAHjC,IAGkD,6BAHlD,SAIS3D,KAAKH,MAAMkF,OAAOnB,eAJ3B,IAI2C,6BAJ3C,WAKW5D,KAAKH,MAAMkF,OAAOlB,gBAL7B,IAK8C,6BAL9C,UAMU7D,KAAKgD,SAAShD,KAAKH,MAAMkF,OAAOE,YAAa,GAAI,U,GA3BnCrD,aCkIjBsD,E,2MA/HbvI,MAAQ,CACNuC,WAAW,G,EAObO,YAAc,kBAAM,EAAKD,SAAS,CAAEN,WAAW,K,EAE/C8D,SAAW,SAACC,EAAMC,EAAYC,GAC5B,OAAIF,EAAKG,OAAS,GACJH,EAAKI,UAAU,EAAGH,GAEf,MADLD,EAAKI,UAAUJ,EAAKG,OAASD,EAAUF,EAAKG,QAGjDH,G,2EAXPjD,KAAKR,SAAS,CAAEN,WAAW,M,+BAcnB,IAAD,OAGDiG,EACJ,6BACG,IADH,iBAEgB,6BAFhB,2BAE+C,KAG3CC,EACJ,gDACkB,6BADlB,WACiC,KAG7BC,EACJ,4CACc,6BADd,eACiC,KAG7BC,EACJ,wCAEE,6BAFF,qBAE2B,KAGvBC,EACJ,+CAEE,6BAFF,gBAEsB,KAMxB,OAAIvF,KAAKH,MAAM2F,QAIX,kBAACV,EAAA,EAAD,CAAM9C,MAAO,CAAEE,gBAAiB,eAAiBuD,QAAM,GACrD,kBAAC,IAAD,CAAcC,UAAW,MAEzB,uBACEC,KAAK,eACLC,WAAS,8CACTtF,QAAS,SAAAuF,GAAC,OAAI,EAAK3G,UAAU2G,KAE7B,kBAAC,EAAD,CAAmBd,OAAQ/E,KAAKH,SAKlC,kBAACI,EAAA,EAAD,CAAOM,KAAMP,KAAKrD,MAAMuC,UAAWsB,QAASR,KAAKP,aAC/C,kBAACgB,EAAA,EAAD,CACEC,KAAK,UACLC,QAAQ,yDAGV,kBAACV,EAAA,EAAMW,QAAP,KACE,kBAAC,EAAD,CACEyB,SAAS,gBACT0B,YAAaoB,EACb7H,KAAM0C,KAAKH,QAGb,kBAAC,EAAD,CACEwC,SAAS,eACT0B,YAAaqB,EACb9H,KAAM0C,KAAKH,QAGb,kBAAC,EAAD,CACEwC,SAAS,cACT0B,YAAasB,EACbrB,UAAWhE,KAAKH,MAAM6D,aAAe,EACrCpG,KAAM0C,KAAKH,QAGb,kBAAC,EAAD,CACEwC,SAAS,WACT0B,YAAauB,EACbhI,KAAM0C,KAAKH,QAGb,kBAAC,EAAD,CACEwC,SAAS,kBACT0B,YAAawB,EACbjI,KAAM0C,KAAKH,SAIf,kBAACI,EAAA,EAAMwB,QAAP,KACE,kBAACtB,EAAA,EAAD,CAAQuB,MAAM,MAAMpB,QAASN,KAAKP,YAAakC,UAAQ,GACrD,kBAACJ,EAAA,EAAD,CAAMC,KAAK,WADb,aAUN,kBAACsD,EAAA,EAAD,CAAM9C,MAAO,CAAEE,gBAAiB,kBAC9B,kBAAC,EAAD,CAAmB6C,OAAQ/E,KAAKH,a,GA1HjB+B,a,ICOnBkE,E,2MACJnJ,MAAQ,CACNoJ,YAAa,GACbC,WAAY,EACZC,WAAYpH,KAAKqH,KAAK,EAAKrG,MAAMxD,gBAAkB,I,EAGrD8J,kB,sBAAoB,sBAAA3I,EAAA,sEACZ,EAAK4I,kBADO,2C,EAIpBjF,S,uCAAW,WAAO0E,EAAGQ,GAAV,SAAA7I,EAAA,sEACH,EAAKgC,SAAS,CAAEwG,WAAYK,EAASL,aADlC,OAET,EAAKI,kBAFI,2C,0DAKXE,kB,uCAAoB,WAAOT,EAAP,kBAAArI,EAAA,6DAAY2B,EAAZ,EAAYA,MAAZ,SACZ,EAAKK,SAAS,CAAEwG,WAAY7G,IADhB,OAElB,EAAKiH,kBAFa,2C,0DAIpBA,gB,sBAAkB,sCAAA5I,EAAA,sEACQ,EAAKqC,MAAM5D,GAAGsK,kBAAkB,EAAK1G,MAAM1D,aADnD,OACVqK,EADU,OAEZC,EAAc,GAEZC,EAA4B,EAAxB,EAAK/J,MAAMqJ,WAAiB,EAJtB,YAKdU,EAA4B,EAAxB,EAAK/J,MAAMqJ,YALD,iCASRW,EAAIH,EAAUE,GATN,UAUO,EAAK7G,MAAM5D,GAAG2C,QAAQ+H,GAV7B,QAUR5B,EAVQ,OAWR6B,EAAS,IAAIC,KAAwB,IAAnB9B,EAAO+B,WAAkBC,iBAC/CN,EAAYO,KACV,kBAAC,EAAD,CACEC,IAAKN,EACLnD,SAAUmD,EAAEO,WACZ3D,WAAYwB,EAAOvD,KACnBiC,UAAWsB,EAAOoC,IAAID,WACtBxD,YAAaqB,EAAOqC,MACpBzD,gBAAiBiD,EACjBhD,eAAgBmB,EAAOsC,SACvBxD,gBAAiBkB,EAAOuC,UACxBrC,YAAa,EAAKpF,MAAM1D,YACxBqJ,SAAS,KAvBD,sFAMdkB,IANc,uBA8BhB,EAAKlH,SAAS,CAAEiH,gBA9BA,0D,wEAkChB,OACE,6BACE,6BACA,uDAFF,oIAKE,6BACA,kBAACc,EAAA,EAAD,CAAMC,QAAS,EAAGC,cAAc,UAC9B,kBAACF,EAAA,EAAKG,OAAN,KACE,kBAACC,EAAA,EAAD,CAASC,WAAS,GAChB,4CAAkB5H,KAAKrD,MAAMqJ,YAC7B,kBAAC6B,EAAA,EAAD,CACEC,IAAK,EACL/I,IAAKiB,KAAKrD,MAAMsJ,WAChB9E,SAAUnB,KAAKsG,kBACfvJ,KAAK,QACLoC,MAAOa,KAAKrD,MAAMqJ,eAIxB,kBAACuB,EAAA,EAAKG,OAAN,KACE,kBAACK,EAAA,EAAD,CACE/B,WAAYhG,KAAKrD,MAAMqJ,WACvBgC,aAAchI,KAAKmB,SACnB8E,WAAYjG,KAAKrD,MAAMsJ,eAI7B,6BA3BF,IA2BS,6BACP,kBAACnB,EAAA,EAAKmD,MAAN,SAAcjI,KAAKrD,MAAM8J,YAAzB,U,GAnFwB7E,aAyFjBC,gBAjGf,SAAyBlF,GACvB,MAAO,CACLV,GAAIU,EAAMV,GACVI,gBAAiBM,EAAMN,gBACvBF,YAAaQ,EAAMR,eA6FR0F,CAAyBiE,G,IClFlCoC,G,2MACJvL,MAAQ,CACNoJ,YAAa,GACbC,WAAY,EACZC,WAAYpH,KAAKqH,KAAK,EAAKrG,MAAMvD,iBAAmB,I,EAGtD6J,kB,sBAAoB,sBAAA3I,EAAA,sEACZ,EAAK4I,kBADO,2C,EAIpBjF,S,uCAAW,WAAO0E,EAAGQ,GAAV,SAAA7I,EAAA,sEACH,EAAKgC,SAAS,CAAEwG,WAAYK,EAASL,aADlC,OAET,EAAKI,kBAFI,2C,0DAKXE,kB,uCAAoB,WAAOT,EAAP,kBAAArI,EAAA,6DAAY2B,EAAZ,EAAYA,MAAZ,SACV,EAAKK,SAAS,CAAEwG,WAAY7G,IADlB,OAEhB,EAAKiH,kBAFW,2C,0DAKpBA,gB,sBAAkB,0CAAA5I,EAAA,6DACZ2K,EAAQ,GACRC,EAAS,GAFG,SAGV,EAAK5I,SAAS,CAAEiH,YAAa,KAHnB,OAKVC,EAA4B,EAAxB,EAAK/J,MAAMqJ,WAAiB,EALtB,YAMdU,EAA4B,EAAxB,EAAK/J,MAAMqJ,YAND,0CAUS,EAAKnG,MAAM5D,GAAG2C,QAAQ8H,GAV/B,cAUR2B,EAVQ,OAWZF,EAAMnB,KAAKqB,GAXC,UAYQ,EAAKxI,MAAM5D,GAAGqM,cAAc5B,GAZpC,QAYRlB,EAZQ,OAaZ4C,EAAOpB,KAAKxB,GAbA,sFAOdkB,IAPc,uBAqBhB,IADID,EAAc,GACTC,EAAI,EAAGA,EAAIyB,EAAM/E,OAAQsD,IAC5BE,EAAS,IAAIC,KAA0B,IAArBsB,EAAMzB,GAAGI,WAAkBC,iBACjDN,EAAYO,KACV,kBAAC,EAAD,CACEC,IAAKP,EACLlD,SAAkC,EAAxB,EAAK7G,MAAMqJ,WAAiB,EAAIU,EAC1CnD,WAAY4E,EAAMzB,GAAGlF,KACrBiC,UAAW0E,EAAMzB,GAAGS,IAAID,WACxBxD,YAAayE,EAAMzB,GAAGU,MACtBzD,gBAAiBiD,EACjBhD,eAAgBuE,EAAMzB,GAAGW,SACzBxD,gBAAiBsE,EAAMzB,GAAGY,UAC1BrC,YAAamD,EAAO1B,GACpBlB,QAAS,EAAK3F,MAAM1D,cAAgBiM,EAAO1B,MAIjD,EAAKlH,SAAS,CAAEiH,gBAtCA,0D,wEA0ChB,OACE,6BACE,6BACA,2DAFF,oIAKE,6BACA,kBAACc,EAAA,EAAD,CAAMC,QAAS,EAAGC,cAAc,UAC9B,kBAACF,EAAA,EAAKG,OAAN,KACE,kBAACC,EAAA,EAAD,CAASC,WAAS,GAChB,4CAAkB5H,KAAKrD,MAAMqJ,YAC7B,kBAAC6B,EAAA,EAAD,CACEC,IAAK,EACL/I,IAAKiB,KAAKrD,MAAMsJ,WAChB9E,SAAUnB,KAAKsG,kBACfvJ,KAAK,QACLoC,MAAOa,KAAKrD,MAAMqJ,eAIxB,kBAACuB,EAAA,EAAKG,OAAN,KACE,kBAACK,EAAA,EAAD,CACE/B,WAAYhG,KAAKrD,MAAMqJ,WACvBgC,aAAchI,KAAKmB,SACnB8E,WAAYjG,KAAKrD,MAAMsJ,eAI7B,6BA3BF,IA2BS,6BACP,6BACE,kBAACnB,EAAA,EAAKmD,MAAN,KAAajI,KAAKrD,MAAM8J,mB,GA7FJ7E,aAoGfC,gBA5Gf,SAAyBlF,GACvB,MAAO,CACLV,GAAIU,EAAMV,GACVK,iBAAkBK,EAAML,iBACxBH,YAAaQ,EAAMR,eAwGR0F,CAAyBqG,I,ICtGlCK,G,2MACJ5L,MAAQ,CACNwC,MAAO,GACPC,QAAS,GACTC,aAAc,GACdC,SAAS,EACTkE,SAAU,M,EAcZ9D,S,uCAAW,WAAMC,GAAN,eAAAnC,EAAA,6DACTmC,EAAMC,iBACN,EAAKJ,SAAS,CACZF,SAAS,EACTD,aAAc,GACdD,QAAS,sDALF,kBAQD,EAAKS,MAAM5D,GACduM,OAAO,EAAK7L,MAAM6G,SAAU,EAAK7G,MAAMwC,OATnC,uBAUe,EAAKU,MAAM5D,GAC9B2C,QAAQ,EAAKjC,MAAM6G,UAXf,OAUHiF,EAVG,OAaH,EAAK9L,MAAM+G,YAAc+E,EAAUrB,OACrC,EAAK5H,SAAS,CACZF,SAAS,EACTF,QAAS,kCAEXJ,EAAe,EAAKa,MAAM5D,GAAI,EAAK4D,MAAM1D,cAEzC,EAAKqD,SAAS,CACZF,SAAS,EACTF,QAAS,4CAtBN,kDA0BP,EAAKI,SAAS,CACZF,SAAS,EACTD,aAAc,KAAID,QAClBA,QACE,mEA9BG,0D,2PARLoE,GAAYxD,KAAKH,MAAM6I,SAAS/L,MAAM6G,SACtCE,GAAe1D,KAAKH,MAAM6I,SAAS/L,MAAM+G,YAC7C1D,KAAKR,SAAS,CACZgE,WACAE,gB,qIAuCM,IAAD,OACP,OACE,iCAEE,kBAACjD,EAAA,EAAD,CACEC,KAAK,UACLC,QAAQ,wFAEV,+BACE,4BACE,4BACE,kBAAC,EAAD,CACE6C,SAAUxD,KAAKrD,MAAM6G,SACrBD,WAAYvD,KAAKH,MAAM6I,SAAS/L,MAAM4G,WACtCE,UAAWzD,KAAKH,MAAM6I,SAAS/L,MAAM8G,UACrCC,YAAa1D,KAAKH,MAAM6I,SAAS/L,MAAM+G,YACvCC,gBAAiB3D,KAAKH,MAAM6I,SAAS/L,MAAMgH,gBAC3CC,eAAgB5D,KAAKH,MAAM6I,SAAS/L,MAAMiH,eAC1CC,gBAAiB7D,KAAKH,MAAM6I,SAAS/L,MAAMkH,gBAC3CoB,YAAajF,KAAKH,MAAM1D,YACxBqJ,SAAS,KAGb,4BACG,IACD,+DAEF,4BACE,yBACE3E,IAAI,kCACJiC,MAAM,QACNhC,IAAI,cAKZ,6BACA,kBAACC,EAAA,EAAD,CAAMrB,SAAUM,KAAKN,SAAUsB,QAAShB,KAAKrD,MAAM0C,cACjD,kBAAC0B,EAAA,EAAKE,MAAN,KACE,4DACA,2BACEC,YAAY,cACZC,SAAU,SAAAxB,GAAK,OACb,EAAKH,SAAS,CACZL,MAAOQ,EAAMyB,OAAOjC,YAK5B,kBAACkC,EAAA,EAAD,CAASL,OAAK,EAACM,OAAO,QAAQX,QAASX,KAAKrD,MAAM0C,eAClD,kBAACc,EAAA,EAAD,CAAQC,SAAO,EAACrD,KAAK,SAASuC,QAASU,KAAKrD,MAAM2C,SAChD,kBAACiC,EAAA,EAAD,CAAMC,KAAK,UADb,iBAIA,kBAAC,IAAD,CAAMY,GAAG,sBACP,kBAACjC,EAAA,EAAD,CAAQuB,MAAM,MAAMC,UAAQ,GAC1B,kBAACJ,EAAA,EAAD,CAAMC,KAAK,WADb,WAIF,6BACA,4BAAKxB,KAAKrD,MAAMyC,e,GAnHCwC,aA0HZC,gBAjIf,SAAyBlF,GACvB,MAAO,CACLV,GAAIU,EAAMV,GACVE,YAAaQ,EAAMR,eA8HR0F,CAAyB0G,I,IC1HlCI,G,2MACJhM,MAAQ,CACNwC,MAAO,GACPC,QAAS,GACTC,aAAc,GACdC,SAAS,EACTsJ,WAAY,GACZC,eAAgB,KAChBtF,WAAY,GACZE,UAAW,G,EAoBb/D,S,uCAAW,WAAMC,GAAN,SAAAnC,EAAA,6DACTmC,EAAMC,iBACN,EAAKJ,SAAS,CACZF,SAAS,EACTD,aAAc,GACdD,QAAS,sDALF,kBAQD,EAAKS,MAAM5D,GAAG6M,YAAY,EAAKnM,MAAMkM,eAAgB,GARpD,OASP,EAAKrJ,SAAS,CACZF,SAAS,EACTF,QAAS,kEAEXJ,EAAe,EAAKa,MAAM5D,GAAI,EAAK4D,MAAM1D,aAblC,gDAeP,EAAKqD,SAAS,CACZF,SAAS,EACTD,aAAc,KAAID,QAClBA,QAAS,8BAlBJ,yD,sQAdLyJ,GAAkB7I,KAAKH,MAAM6I,SAAS/L,MAAM6G,SAC5CuF,EACF,wCACAlK,KAAKC,MAAsB,IAAhBD,KAAKmK,UAChB,EACFhJ,KAAKR,SAAS,CAAEJ,QAAS2J,I,SACPE,MAAMF,G,cAAlBG,E,gBACcA,EAAIC,O,OAAlBC,E,OACNpJ,KAAKR,SAAS,CACZoJ,WAAYQ,EAAMC,UAClBR,mB,sIA4BF,OACE,6BAEE,wEACA,+BACE,4BACE,4BACE,kBAAC,EAAD,CACErF,SAAUxD,KAAKrD,MAAMkM,eACrBtF,WAAYvD,KAAKH,MAAM6I,SAAS/L,MAAM4G,WACtCE,UAAWzD,KAAKH,MAAM6I,SAAS/L,MAAM8G,UACrCC,YAAa1D,KAAKH,MAAM6I,SAAS/L,MAAM+G,YACvCC,gBAAiB3D,KAAKH,MAAM6I,SAAS/L,MAAMgH,gBAC3CC,eAAgB5D,KAAKH,MAAM6I,SAAS/L,MAAMiH,eAC1CC,gBAAiB7D,KAAKH,MAAM6I,SAAS/L,MAAMkH,gBAC3CoB,YAAajF,KAAKH,MAAM1D,YACxBqJ,SAAS,KAGb,4BACE,yBAAK3E,IAAKb,KAAKrD,MAAMiM,WAAY9F,MAAM,QAAQhC,IAAI,0BAIzD,6BACA,kBAACC,EAAA,EAAD,CAAMrB,SAAUM,KAAKN,SAAUsB,QAAShB,KAAKrD,MAAM0C,cACjD,kBAACgC,EAAA,EAAD,CAASL,OAAK,EAACM,OAAO,QAAQX,QAASX,KAAKrD,MAAM0C,eAClD,kBAACc,EAAA,EAAD,CAAQC,SAAO,EAACrD,KAAK,SAASuC,QAASU,KAAKrD,MAAM2C,SAChD,kBAACiC,EAAA,EAAD,CAAMC,KAAK,UADb,mBAIA,kBAAC,IAAD,CAAMY,GAAG,sBACP,kBAACjC,EAAA,EAAD,CAAQuB,MAAM,MAAMC,UAAQ,GAC1B,kBAACJ,EAAA,EAAD,CAAMC,KAAK,WADb,WAIF,6BACA,4BAAKxB,KAAKrD,MAAMyC,e,GA1FAwC,aAiGXC,gBAxGf,SAAyBlF,GACvB,MAAO,CACLV,GAAIU,EAAMV,GACVE,YAAaQ,EAAMR,eAqGR0F,CAAyB8G,I,IClGlCW,G,2MACJ3M,MAAQ,CACNwC,MAAO,GACPC,QAAS,GACTC,aAAc,GACdC,SAAS,EACTkE,SAAU,M,EAWZ9D,S,uCAAW,WAAMC,GAAN,SAAAnC,EAAA,6DACTmC,EAAMC,iBACN,EAAKJ,SAAS,CACZF,SAAS,EACTD,aAAc,GACdD,QAAS,sDALF,kBAQD,EAAKS,MAAM5D,GAAGsN,WAAW,EAAK5M,MAAM6G,SAAU,EAAK7G,MAAMwC,OARxD,OASP,EAAKK,SAAS,CACZF,SAAS,EACTF,QAAS,sCAXJ,gDAcP,EAAKI,SAAS,CACZF,SAAS,EACTD,aAAc,KAAID,QAClBA,QAAS,8BAjBJ,yD,yPANLoE,GAAYxD,KAAKH,MAAM6I,SAAS/L,MAAM6G,SAC1CxD,KAAKR,SAAS,CACZgE,a,qIA0BM,IAAD,OACP,OACE,iCACG,kBAAC/C,EAAA,EAAD,CAAQC,KAAK,UAAUC,QAAQ,mCAChC,+BACE,4BACE,4BACE,kBAAC,EAAD,CACE6C,SAAUxD,KAAKrD,MAAM6G,SACrBD,WAAYvD,KAAKH,MAAM6I,SAAS/L,MAAM4G,WACtCE,UAAWzD,KAAKH,MAAM6I,SAAS/L,MAAM8G,UACrCC,YAAa1D,KAAKH,MAAM6I,SAAS/L,MAAM+G,YACvCC,gBAAiB3D,KAAKH,MAAM6I,SAAS/L,MAAMgH,gBAC3CC,eAAgB5D,KAAKH,MAAM6I,SAAS/L,MAAMiH,eAC1CC,gBAAiB7D,KAAKH,MAAM6I,SAAS/L,MAAMkH,gBAC3CoB,YAAajF,KAAKH,MAAM1D,YACxBqJ,SAAS,KAGb,4BACE,yBAAK3E,IAAI,4BAA4BC,IAAI,gBAI/C,6BACA,kBAACC,EAAA,EAAD,CAAMrB,SAAUM,KAAKN,SAAUsB,QAAShB,KAAKrD,MAAM0C,cACjD,kBAAC0B,EAAA,EAAKE,MAAN,KACE,kDACA,2BACEC,YAAY,OACZC,SAAU,SAAAxB,GAAK,OACb,EAAKH,SAAS,CACZL,MAAOQ,EAAMyB,OAAOjC,YAK5B,kBAACkC,EAAA,EAAD,CAASL,OAAK,EAACM,OAAO,QAAQX,QAASX,KAAKrD,MAAM0C,eAClD,kBAACc,EAAA,EAAD,CAAQC,SAAO,EAACrD,KAAK,SAASuC,QAASU,KAAKrD,MAAM2C,SAChD,kBAACiC,EAAA,EAAD,CAAMC,KAAK,UADb,eAIA,kBAAC,IAAD,CAAMY,GAAG,sBACP,kBAACjC,EAAA,EAAD,CAAQuB,MAAM,MAAMC,UAAQ,GAC1B,kBAACJ,EAAA,EAAD,CAAMC,KAAK,WADb,WAIF,6BACA,4BAAKxB,KAAKrD,MAAMyC,e,GAvFDwC,aA8FVC,gBArGf,SAAyBlF,GACvB,MAAO,CACLV,GAAIU,EAAMV,GACVE,YAAaQ,EAAMR,eAkGR0F,CAAyByH,I,IC3FlCE,G,2MACJ7M,MAAQ,CACNwC,MAAO,GACPC,QAAS,GACTC,aAAc,GACdC,SAAS,EACTkE,SAAU,M,EAYZ9D,S,uCAAW,WAAMC,GAAN,SAAAnC,EAAA,6DACTmC,EAAMC,iBACN,EAAKJ,SAAS,CACZF,SAAS,EACTD,aAAc,GACdD,QAAS,sDALF,kBAQD,EAAKS,MAAM5D,GACdwN,QAAQ,EAAK9M,MAAM6G,SAAU,CAACrE,MAAOtB,SAAO6L,MAAMC,WAAW,UATzD,OAUP,EAAKnK,SAAS,CACZF,SAAS,EACTF,QAAS,gCAZJ,gDAeP,EAAKI,SAAS,CACZF,SAAS,EACTD,aAAc,KAAID,QAClBA,QAAS,8BAlBJ,yD,yPANLoE,GAAYxD,KAAKH,MAAM6I,SAAS/L,MAAM6G,SAC1CxD,KAAKR,SAAS,CACZgE,a,qIA4BF,OACE,iCAEE,kBAAC/C,EAAA,EAAD,CACEC,KAAK,UACLC,QAAQ,mEAEV,+BACE,4BACE,4BACE,kBAAC,EAAD,CACE6C,SAAUxD,KAAKrD,MAAM6G,SACrBD,WAAYvD,KAAKH,MAAM6I,SAAS/L,MAAM4G,WACtCE,UAAWzD,KAAKH,MAAM6I,SAAS/L,MAAM8G,UACrCC,YAAa1D,KAAKH,MAAM6I,SAAS/L,MAAM+G,YACvCC,gBAAiB3D,KAAKH,MAAM6I,SAAS/L,MAAMgH,gBAC3CC,eAAgB5D,KAAKH,MAAM6I,SAAS/L,MAAMiH,eAC1CC,gBAAiB7D,KAAKH,MAAM6I,SAAS/L,MAAMkH,gBAC3CoB,YAAajF,KAAKH,MAAM1D,YACxBqJ,SAAS,KAGb,4BACE,yBACE3E,IAAI,4BACJiC,MAAM,QACNhC,IAAI,eAKZ,6BACA,kBAACC,EAAA,EAAD,CAAMrB,SAAUM,KAAKN,SAAUsB,QAAShB,KAAKrD,MAAM0C,cACjD,kBAACgC,EAAA,EAAD,CAASL,OAAK,EAACM,OAAO,QAAQX,QAASX,KAAKrD,MAAM0C,eAClD,kBAACc,EAAA,EAAD,CAAQC,SAAO,EAACrD,KAAK,SAASuC,QAASU,KAAKrD,MAAM2C,SAChD,kBAACiC,EAAA,EAAD,CAAMC,KAAK,UADb,aAIA,kBAAC,IAAD,CAAMY,GAAG,sBACP,kBAACjC,EAAA,EAAD,CAAQuB,MAAM,MAAMC,UAAQ,GAC1B,kBAACJ,EAAA,EAAD,CAAMC,KAAK,WADb,WAIF,6BACA,4BAAKxB,KAAKrD,MAAMyC,e,GAtFJwC,aA6FPC,gBArGf,SAAyBlF,GACvB,MAAO,CACLiN,aAAcjN,EAAMiN,aACpB3N,GAAIU,EAAMV,GACVE,YAAaQ,EAAMR,eAiGR0F,CAAyB2H,I,IChGlCK,G,2MACJlN,MAAQ,CACNwC,MAAO,GACPC,QAAS,GACTC,aAAc,GACdC,SAAS,EACTkE,SAAU,M,EAYZ9D,S,uCAAW,WAAMC,GAAN,SAAAnC,EAAA,6DACTmC,EAAMC,iBACN,EAAKJ,SAAS,CACZF,SAAS,EACTD,aAAc,GACdD,QAAS,sDALF,kBAQD,EAAKS,MAAM5D,GACd6N,aAAa,EAAKjK,MAAM1D,YAAa,EAAKQ,MAAMwC,MAAO,EAAKxC,MAAM6G,UAT9D,OAUP,EAAKhE,SAAS,CACZF,SAAS,EACTF,QAAS,uCAZJ,gDAeP,EAAKI,SAAS,CACZF,SAAS,EACTD,aAAc,KAAID,QAClBA,QAAS,8BAlBJ,yD,yPANLoE,GAAYxD,KAAKH,MAAM6I,SAAS/L,MAAM6G,SAC1CxD,KAAKR,SAAS,CACZgE,a,qIA2BM,IAAD,OACP,OACE,iCACG,kBAAC/C,EAAA,EAAD,CAAQC,KAAK,UAAUC,QAAQ,sCAChC,+BACE,4BACE,4BACE,kBAAC,EAAD,CACE6C,SAAUxD,KAAKrD,MAAM6G,SACrBD,WAAYvD,KAAKH,MAAM6I,SAAS/L,MAAM4G,WACtCE,UAAWzD,KAAKH,MAAM6I,SAAS/L,MAAM8G,UACrCC,YAAa1D,KAAKH,MAAM6I,SAAS/L,MAAM+G,YACvCC,gBAAiB3D,KAAKH,MAAM6I,SAAS/L,MAAMgH,gBAC3CC,eAAgB5D,KAAKH,MAAM6I,SAAS/L,MAAMiH,eAC1CC,gBAAiB7D,KAAKH,MAAM6I,SAAS/L,MAAMkH,gBAC3CoB,YAAajF,KAAKH,MAAM1D,YACxBqJ,SAAS,KAGb,4BACE,yBAAK3E,IAAI,iCAAiCC,IAAI,2BAIpD,6BACA,kBAACC,EAAA,EAAD,CAAMrB,SAAUM,KAAKN,SAAUsB,QAAShB,KAAKrD,MAAM0C,cACjD,kBAAC0B,EAAA,EAAKE,MAAN,KACE,mEACA,2BACEC,YAAY,UACZC,SAAU,SAAAxB,GAAK,OACb,EAAKH,SAAS,CACZL,MAAOQ,EAAMyB,OAAOjC,YAK5B,kBAACkC,EAAA,EAAD,CAASL,OAAK,EAACM,OAAO,QAAQX,QAASX,KAAKrD,MAAM0C,eAClD,kBAACc,EAAA,EAAD,CAAQC,SAAO,EAACrD,KAAK,SAASuC,QAASU,KAAKrD,MAAM2C,SAChD,kBAACiC,EAAA,EAAD,CAAMC,KAAK,UADb,mBAIA,kBAAC,IAAD,CAAMY,GAAG,sBACP,kBAACjC,EAAA,EAAD,CAAQuB,MAAM,MAAMC,UAAQ,GAC1B,kBAACJ,EAAA,EAAD,CAAMC,KAAK,WADb,WAIF,6BACA,4BAAKxB,KAAKrD,MAAMyC,e,GAzFGwC,aAgGdC,gBAvGf,SAAyBlF,GACvB,MAAO,CACLV,GAAIU,EAAMV,GACVE,YAAaQ,EAAMR,eAoGR0F,CAAyBgI,ICxBzBE,G,2MAtDX5D,kB,sBAAoB,4BAAA3I,EAAA,+EAEOD,IAFP,cAERyM,EAFQ,gBAGRhL,EAAegL,EAAO/N,GAAI+N,EAAO7N,aAHzB,uDAMd8N,MAAM,4EACNpN,QAAQC,IAAR,MAPc,yD,wEAuBpB,OACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,IAAD,KACE,kBAACyN,EAAA,EAAD,KACE,kBAAC,EAAD,CAAQvN,MAAOqD,KAAKrD,QACpB,6BACE,kBAAC,IAAD,CAAOwN,OAAK,EAACC,KAAK,IAAIC,UAAW5H,IACjC,kBAAC,IAAD,CACE0H,OAAK,EACLC,KAAK,qBACLC,UAAWvE,KAEb,kBAAC,IAAD,CACEqE,OAAK,EACLC,KAAK,mBACLC,UAAWnC,KAGb,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,gBAAgBC,UAAW9B,KAC7C,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,eAAeC,UAAW1B,KAC5C,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,cAAcC,UAAWf,KAC3C,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,WAAWC,UAAWb,KACxC,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,kBAAkBC,UAAWR,a,GAxD3CjI,a,OChBlB0I,IAASC,OACL,kBAAC,GAAD,MACFC,SAASC,cAAc,Y","file":"static/js/main.b41f507d.chunk.js","sourcesContent":["//\n//      This is the REDUX \"duck\" format file.\n//\n//      This file contains all the constants, reducers, and action creators in one file\n//      rather than spread them out among multiple directories and files.\n//\n\n// Action Types\n\n// Types are listened for within the reducer switch whenever an action is fired off.\n// The action is sent to the reducer with a type, and when that type matches the type within the a case of the switch,\n// some sort of data manipulation is fired off.\n//\n// They are defined as all upper-case constants and may be exported if needed elsewhere.\n\nconst BLOCKCHAIN_INITIALIZED = \"BLOCKCHAIN_INITIALIZED\";\nconst ZOMBIE_COUNT = \"ZOMBIE_COUNT\";\n\n//  Actions and Action Creator Functions\n//\n// Actions are simple javascript objects that at least contain a type, and may also contain data that can be sent to the reducer.\n// When the user clicks on something that has an effect on the state of an app, an action creator sends an action to the reducer\n// where the data manipulation happens.\n//\n// An action typically looks like this:   { type: ADD_ITEM, item: 'Adding this item' }\n//\n// Action creators are the functions that create actions and send them to the reducer.\n// They usually return an action, sometimes can dispatch multiple actions (with the help of middleware like thunk),\n// or can begin asynchronous events like API calls.\n\n\nexport function blockchainInitialized(data) {\n  return {\n    type: BLOCKCHAIN_INITIALIZED,\n    payload: data\n  };\n}\n\n//\n//  define the initial state for the store\n//\n\nconst initialState = {\n    CZ: {}, // contract instance with methods, etc.\n    signer: null,\n    userAddress: 0x0,\n    provider: null,\n    userZombieCount: 0,\n    totalZombieCount: 0\n};\n\n// Reducers\n//\n// The reducer is typically the only thing that touches the store.\n// It only deals within a particular part of the store, initialized as initialState.\n// It's a pure switch statement that does not directly change the state because state is immutable.\n// That means you cannot use a method like .pop or .push that manipulates the array it's called on.\n// Instead we create a now store from the old store and any information we want to put in to it.\n// All reducers have a default case that just returns state.\n//\n// In this case, note that it is the default export.\n\nexport default function reducer(state = initialState, action) {\n  console.log(\"reducer\", action);\n  switch (action.type) {\n\n    case BLOCKCHAIN_INITIALIZED:\n        return Object.assign({}, state, {\n            CZ: action.payload.CZ,\n            signer: action.payload.signer,\n            userAddress: action.payload.userAddress,\n            provider: action.payload.provider,\n            userZombieCount: action.payload.userZombieCount\n        });\n\n    case ZOMBIE_COUNT:\n        console.log(\"my reducer zombie count\", state);\n      return Object.assign({}, state, {\n        totalZombieCount: action.payload.totalZombieCount,\n        userZombieCount: action.payload.userZombieCount\n      });\n\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport reducer from \"./modules/czAppDuck\";\n\nconst loggerMiddleware = createLogger(); // initialize logger\n\n\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware,loggerMiddleware));\nexport default store;\n","import CryptoZombiesContract from \"../contract_ABI/CryptoZombies.sol/CryptoZombies.json\";\nimport store from \"../redux/store\";\nimport { ethers } from \"ethers\";\n\nexport const BLOCKCHAIN_INITIALIZED = \"BLOCKCHAIN_INITIALIZED\"; // action type\n\n// action creators (dispatch sends this to redux reducer)\n\nfunction blockchainInitialized(data) {\n    return {\n        type: BLOCKCHAIN_INITIALIZED,\n        payload: data\n    };\n}\n\n\n//  set up provider, signer and contract instance\n\nconst initBlockchain = async () => {\n\n    // get contract instance and user address\n    // If you don't specify a //url//, Ethers connects to the default\n    // (i.e. ``http:/\\/localhost:8545``)\n\n    // I used this to connect to Ganache:\n\n    //const provider = await new ethers.providers.JsonRpcProvider();\n    //console.log(\"provider\", provider);\n\n    let provider;\n    window.ethereum.enable().then(provider = new ethers.providers.Web3Provider(window.ethereum));\n\n    // The provider also allows signing transactions to\n    // send ether and pay to change state within the blockchain.\n    // For this, we need the account signer...\n\n    const signer = await provider.getSigner()\n    console.log(\"signer\", signer);\n    const userAddress =  await signer.getAddress();\n    console.log(\"user address\", userAddress);\n\n    // initialize shadow contract\n\n    let CZ = null;\n    console.log(\"READ ABI\");\n    //const abi = JSON.parse(CryptoZombiesContract.abi);\n    const abi = JSON.parse(\"[\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_approved\\\",\\n\" +\n        \"          \\\"type\\\": \\\"address\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_tokenId\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"approve\\\",\\n\" +\n        \"      \\\"outputs\\\": [],\\n\" +\n        \"      \\\"payable\\\": true,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"payable\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_zombieId\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"levelUp\\\",\\n\" +\n        \"      \\\"outputs\\\": [],\\n\" +\n        \"      \\\"payable\\\": true,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"payable\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_zombieId\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_kittyId\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"feedOnKitty\\\",\\n\" +\n        \"      \\\"outputs\\\": [],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"nonpayable\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": true,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"zombies\\\",\\n\" +\n        \"      \\\"outputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"name\\\",\\n\" +\n        \"          \\\"type\\\": \\\"string\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"dna\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"level\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint32\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"readyTime\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint32\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"winCount\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint16\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"lossCount\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint16\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"view\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_from\\\",\\n\" +\n        \"          \\\"type\\\": \\\"address\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_to\\\",\\n\" +\n        \"          \\\"type\\\": \\\"address\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_tokenId\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"transferFrom\\\",\\n\" +\n        \"      \\\"outputs\\\": [],\\n\" +\n        \"      \\\"payable\\\": true,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"payable\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [],\\n\" +\n        \"      \\\"name\\\": \\\"withdraw\\\",\\n\" +\n        \"      \\\"outputs\\\": [],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"nonpayable\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": true,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_owner\\\",\\n\" +\n        \"          \\\"type\\\": \\\"address\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"getZombiesByOwner\\\",\\n\" +\n        \"      \\\"outputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256[]\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"view\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": true,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"zombieToOwner\\\",\\n\" +\n        \"      \\\"outputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"\\\",\\n\" +\n        \"          \\\"type\\\": \\\"address\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"view\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_address\\\",\\n\" +\n        \"          \\\"type\\\": \\\"address\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"setKittyContractAddress\\\",\\n\" +\n        \"      \\\"outputs\\\": [],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"nonpayable\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_zombieId\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_newDna\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"changeDna\\\",\\n\" +\n        \"      \\\"outputs\\\": [],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"nonpayable\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": true,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_tokenId\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"ownerOf\\\",\\n\" +\n        \"      \\\"outputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"\\\",\\n\" +\n        \"          \\\"type\\\": \\\"address\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"view\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_seconds\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"setCooldownTime\\\",\\n\" +\n        \"      \\\"outputs\\\": [],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"nonpayable\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": true,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_owner\\\",\\n\" +\n        \"          \\\"type\\\": \\\"address\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"balanceOf\\\",\\n\" +\n        \"      \\\"outputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"view\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [],\\n\" +\n        \"      \\\"name\\\": \\\"renounceOwnership\\\",\\n\" +\n        \"      \\\"outputs\\\": [],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"nonpayable\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_name\\\",\\n\" +\n        \"          \\\"type\\\": \\\"string\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"createRandomZombie\\\",\\n\" +\n        \"      \\\"outputs\\\": [],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"nonpayable\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": true,\\n\" +\n        \"      \\\"inputs\\\": [],\\n\" +\n        \"      \\\"name\\\": \\\"owner\\\",\\n\" +\n        \"      \\\"outputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"\\\",\\n\" +\n        \"          \\\"type\\\": \\\"address\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"view\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": true,\\n\" +\n        \"      \\\"inputs\\\": [],\\n\" +\n        \"      \\\"name\\\": \\\"isOwner\\\",\\n\" +\n        \"      \\\"outputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"\\\",\\n\" +\n        \"          \\\"type\\\": \\\"bool\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"view\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_zombieId\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_newName\\\",\\n\" +\n        \"          \\\"type\\\": \\\"string\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"changeName\\\",\\n\" +\n        \"      \\\"outputs\\\": [],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"nonpayable\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_fee\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"setLevelUpFee\\\",\\n\" +\n        \"      \\\"outputs\\\": [],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"nonpayable\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_zombieId\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"_targetId\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"attack\\\",\\n\" +\n        \"      \\\"outputs\\\": [],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"nonpayable\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"constant\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"name\\\": \\\"newOwner\\\",\\n\" +\n        \"          \\\"type\\\": \\\"address\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"transferOwnership\\\",\\n\" +\n        \"      \\\"outputs\\\": [],\\n\" +\n        \"      \\\"payable\\\": false,\\n\" +\n        \"      \\\"stateMutability\\\": \\\"nonpayable\\\",\\n\" +\n        \"      \\\"type\\\": \\\"function\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"anonymous\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"indexed\\\": true,\\n\" +\n        \"          \\\"name\\\": \\\"_from\\\",\\n\" +\n        \"          \\\"type\\\": \\\"address\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"indexed\\\": true,\\n\" +\n        \"          \\\"name\\\": \\\"_to\\\",\\n\" +\n        \"          \\\"type\\\": \\\"address\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"indexed\\\": true,\\n\" +\n        \"          \\\"name\\\": \\\"_tokenId\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"Transfer\\\",\\n\" +\n        \"      \\\"type\\\": \\\"event\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"anonymous\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"indexed\\\": true,\\n\" +\n        \"          \\\"name\\\": \\\"_owner\\\",\\n\" +\n        \"          \\\"type\\\": \\\"address\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"indexed\\\": true,\\n\" +\n        \"          \\\"name\\\": \\\"_approved\\\",\\n\" +\n        \"          \\\"type\\\": \\\"address\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"indexed\\\": true,\\n\" +\n        \"          \\\"name\\\": \\\"_tokenId\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"Approval\\\",\\n\" +\n        \"      \\\"type\\\": \\\"event\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"anonymous\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"indexed\\\": false,\\n\" +\n        \"          \\\"name\\\": \\\"zombieId\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"indexed\\\": false,\\n\" +\n        \"          \\\"name\\\": \\\"name\\\",\\n\" +\n        \"          \\\"type\\\": \\\"string\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"indexed\\\": false,\\n\" +\n        \"          \\\"name\\\": \\\"dna\\\",\\n\" +\n        \"          \\\"type\\\": \\\"uint256\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"NewZombie\\\",\\n\" +\n        \"      \\\"type\\\": \\\"event\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"anonymous\\\": false,\\n\" +\n        \"      \\\"inputs\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"indexed\\\": true,\\n\" +\n        \"          \\\"name\\\": \\\"previousOwner\\\",\\n\" +\n        \"          \\\"type\\\": \\\"address\\\"\\n\" +\n        \"        },\\n\" +\n        \"        {\\n\" +\n        \"          \\\"indexed\\\": true,\\n\" +\n        \"          \\\"name\\\": \\\"newOwner\\\",\\n\" +\n        \"          \\\"type\\\": \\\"address\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ],\\n\" +\n        \"      \\\"name\\\": \\\"OwnershipTransferred\\\",\\n\" +\n        \"      \\\"type\\\": \\\"event\\\"\\n\" +\n        \"    }\\n\" +\n        \"  ]\");\n\n   // CZ = new ethers.Contract('0xf01b5d859b2a73DBE407f4553b06ffF50F19b7e4', abi, signer);\n    CZ = new ethers.Contract('0xB11f26ad0bb7f4705F9eB116c224FFc323798695', abi, signer);\n    // put state data into the REDUX store for easy access from other pages and components\n\n    let data = { provider, signer, CZ, userAddress };\n    store.dispatch(blockchainInitialized(data));\n  return data;\n}\n\nexport default initBlockchain;\n","import store from \"../redux/store\";\n\nexport const ZOMBIE_COUNT = \"ZOMBIE_COUNT\"; // action type\n\n// action creator (dispatch sends this to redux reducer)\nfunction zombieCount(data) {\n  return {\n    type: ZOMBIE_COUNT,\n    payload: data\n  };\n}\n\n//\n//  set up the blockchain shadow contract, user address, and user zombie count.  Put into redux store.\n//\n\nasync function getZombieCount(CZ, userAddress) {\n  // get number of zombies owned by the user account\n  let userZombieCount = +(await CZ.balanceOf(userAddress));  // + convert a string to an integer\n\n  // do a binary search to estimate total zombie count.\n  // It is a real shame that the Cryptozombies contract doesn't totally comply with ERC720 to include a function\n  // that returns totalZombieount.\n\n  var high = 8192;\n  var low = 0;\n  var middle = 4096;\n\n  while (low < high) {\n      try {\n      await CZ.zombies(middle);\n      low = middle + 1;\n      middle = Math.floor(low + (high - low) / 2);\n    } catch {\n      high = middle - 1;\n      middle = Math.floor(low + (high - low) / 2);\n    }\n  }\n\n  // put state data into the REDUX store for easy access from other pages and components\n\n  let data = {\n    totalZombieCount: Math.max(low-1, 1),   // from binary search\n    userZombieCount          //EC7 shorthand for totalZombieCount:totalZombieCount because of same variable name\n  };\n\n  store.dispatch(zombieCount(data));\n}\n\nexport default getZombieCount;\n","import React, { Component } from \"react\";\nimport getZombieCount from \"../utils/getZombieCount\";\nimport { connect } from \"react-redux\";\n\nimport { Button, Header, Icon, Modal, Form, Message } from \"semantic-ui-react\";\n\nfunction mapStateToProps(state) {\n    return {\n        CZ: state.CZ,\n        userAddress: state.userAddress,\n        userZombieCount: state.userZombieCount\n    };\n}\n\n\n// Create a new Zombie\n\nclass CreateZombie extends Component {\n  state = {\n    modalOpen: false,\n    value: \"\",\n    message: \"\",\n    errorMessage: \"\",\n    loading: false\n  };\n\n  handleOpen = () => this.setState({ modalOpen: true });\n\n  handleClose = () => this.setState({ modalOpen: false });\n\n  onSubmit = async event => {\n    event.preventDefault();\n    this.setState({\n      loading: true,\n      errorMessage: \"\",\n      message: \"waiting for blockchain transaction to complete...\"\n    });\n    try {\n      await this.props.CZ.createRandomZombie(this.state.value) // contains the zombie name\n      this.setState({\n        loading: false,\n        message: \"You have created a New Zombie\"\n      });\n      getZombieCount(this.props.CZ, this.props.userAddress);\n    } catch (err) {\n      this.setState({\n        loading: false,\n        errorMessage: err.message,\n        message: \"User rejected transaction or else this account is already in use, please try another name.\"\n      });\n    }\n  };\n\n\n  render() {\n    let createDisabled = (this.props.userZombieCount !== 0);\n      return (\n      <Modal\n        trigger={\n          <Button primary disabled={createDisabled} onClick={this.handleOpen}>\n            Create Zombie\n          </Button>\n        }\n        open={this.state.modalOpen}\n        onClose={this.handleClose}\n      >\n        <Header icon=\"browser\" content=\"Create a New Zombie\" />\n        <Modal.Content>\n          <img src=\"static/images/zombieWarrior.jpg\" alt=\"zombie warrior\" /><Header>Be sure to give your zombie a WORTHY name!!!</Header>\n          <br /> <br />\n          <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n            <Form.Field>\n              <label>Zombie Name</label>\n              <input\n                placeholder=\"Name\"\n                onChange={event =>\n                  this.setState({\n                    value: event.target.value\n                  })\n                }\n              />\n            </Form.Field>\n            <Message error header=\"Oops!\" content={this.state.errorMessage} />\n            <Button primary type=\"submit\" loading={this.state.loading}>\n              <Icon name=\"check\" />\n              Create Zombie\n            </Button>\n            <hr />\n            <h2>{this.state.message}</h2>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button color=\"red\" onClick={this.handleClose} inverted>\n            <Icon name=\"cancel\" /> Close\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(CreateZombie);","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport { Button } from \"semantic-ui-react\";\n\nimport CreateZombie from \"./CreateZombie\";\n\nimport { Menu, Header } from \"semantic-ui-react\";\n\nfunction mapStateToProps(state) {\n  return {\n    userAddress: state.userAddress,\n    userZombieCount: state.userZombieCount,\n    totalZombieCount: state.totalZombieCount\n  };\n}\n\n// This renders the topbar on the webpage as well as the lines listing address and zombie count.\n\nclass TopBar extends Component {\n  render() {\n    return (\n      <div>\n        <Menu style={{ marginTop: \"10px\", backgroundColor: \"Salmon\" }}>\n          <Menu.Item>\n            <CreateZombie />\n          </Menu.Item>\n\n          <Menu.Item>\n            <Link to={{ pathname: \"/myZombieInventory\" }}>\n              <Button primary>Show My Zombies</Button>\n            </Link>\n          </Menu.Item>\n\n          <Menu.Item>\n            <Link to={{ pathname: \"/ZombieInventory\" }}>\n              <Button primary>Show All Zombies</Button>\n            </Link>\n          </Menu.Item>\n\n          <Menu.Item position=\"right\">\n            <Link to={{ pathname: \"/\" }}>\n              <Header size=\"large\">CryptoZombies at CSU!!! </Header>\n            </Link>\n          </Menu.Item>\n        </Menu>\n        <div className=\"center\">\n          <h2>The most awesome zombies in the whole wide universe!</h2>\n        </div>\n        Your account address: {this.props.userAddress}\n        <br />\n        You own {this.props.userZombieCount} zombie(s) out of a total of approximately {this.props.totalZombieCount}.\n        <hr />\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(TopBar);\n","import React, { Component } from \"react\";\n\nclass Greeting extends Component {\n  render() {\n    const imgStyle = {\n      display: \"block\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      width: \"50%\"\n    };\n\n    return (\n      <div>\n        <br />\n        <h2 style={{ color: \"DarkRed\", textAlign: \"center\" }}>\n          {\" \"}\n          Welcome to the CSU <b> CryptoZombies</b> game!\n        </h2>\n        <br />\n        <img src=\"static/images/zombieLoser2.jpg\" style={imgStyle} width=\"400px\" alt=\"Zombie rising from grave\" />\n        <br /> <br />\n        <p style={{ textAlign: \"center\" }}>\n          This Colorado State University CS458 blockchain game allows you to create one original zombie\n          on the Ethereum blockchain.\n          <br /> Once created, your zombie can eat cryptokitties to create new\n          zombies.\n          <br /> Additionally, your zombie can attack other zombies (you have a\n          70% chance of winning).\n          <br /> <br /> To get started, select a button from the menu bar above.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Greeting;\n","import React, { Component } from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\n// Create an action button with link\n\nclass ActionButton extends Component {\n  // format long names and addresses into xxxx...xxxx form\n\n  truncate = (text, startChars, endChars) => {\n    if (text.length > 12) {\n      var start = text.substring(0, startChars);\n      var end = text.substring(text.length - endChars, text.length);\n      return start + \"...\" + end;\n    }\n    return text;\n  };\n\n  render() {\n    const zombieData = {\n      zombieName: this.truncate(this.props.data.zombieName, 8, 8),\n      zombieId: this.props.data.zombieId,\n      zombieDNA: this.props.data.zombieDNA,\n      zombieLevel: this.props.data.zombieLevel,\n      zombieReadyTime: this.props.data.zombieReadyTime,\n      zombieWinCount: this.props.data.zombieWinCount,\n      zombieLossCount: this.props.data.zombieLossCount\n    };\n\n    const pathName = this.props.pathname;\n    const buttonLabel = this.props.buttonLabel;\n\n    //console.log(\"button label\", this.props.buttonLabel, pathName, zombieData);\n    return (\n      <Link\n        to={{\n          pathname:  pathName ,\n          state:  zombieData\n        }}\n      >\n        <Button primary disabled={this.props.disableMe}> {buttonLabel} </Button>\n      </Link>\n    );\n  }\n}\n\nexport default ActionButton;\n","import React, { Component } from \"react\";\nimport \"./zombieChar.css\";\n\nclass ZombieChar extends Component {\n\n    catMode () {\n       return ((parseInt(this.props.DNA) % 100) !== 0);\n    }\n\n    currentHeadChoice () {\n        let i =  parseInt(this.props.DNA.substring(0, 2)) % 7 + 1;\n        return \"static/zombieparts/head-\" + i + \"@2x.png\";\n    }\n\n    currentEyeChoice ()  {\n        let i = parseInt(this.props.DNA.substring(2, 4)) % 11 + 1;\n        return \"static/zombieparts/eyes-\" + i + \"@2x.png\";\n    }\n\n    currentShirtChoice ()  {\n        let i = parseInt(this.props.DNA.substring(4, 6)) % 6 + 1;\n        return \"static/zombieparts/shirt-\" + i + \"@2x.png\";\n\n    }\n\n    render() {\n        const skinStyle = {\n            filter: \"hue-rotate(\" + parseInt(this.props.DNA.substring(6, 8)) / 100 * 360 + \"deg)\",\n        };\n\n        const eyeStyle = {\n            filter: \"hue-rotate(\" + parseInt(this.props.DNA.substring(8, 10)) / 100 * 360 + \"deg)\",\n        };\n\n        const shirtStyle = {\n            filter: \"hue-rotate(\" + parseInt(this.props.DNA.substring(10,12)) / 100 * 360 + \"deg)\",\n        };\n\n        if (this.catMode()) {\n            return (\n                <div className=\"zombie-preview\" v-images-loaded=\"zombieLoaded\">\n                    <img  style={skinStyle} className=\"right-upper-arm\" src=\"static/zombieparts/right-upper-arm-1@2x.png\" alt=\"right upper arm\" />\n                    <img  style={shirtStyle}className=\"torso\" src=\"static/zombieparts/torso-1@2x.png\" alt=\"torso\" />\n                    <img  style={skinStyle}className=\"cat-legs\" src=\"static/zombieparts/catlegs.png\" alt=\"catleg\" />\n                    <img  style={shirtStyle} className=\"shirt\" src={this.currentShirtChoice()} alt=\"shirt\" />\n                    <img  style={skinStyle} className=\"left-forearm\" src=\"static/zombieparts/left-forearm-1@2x.png\" alt=\"left forearm\" />\n                    <img  style={skinStyle} className=\"right-forearm\" src=\"static/zombieparts/right-forearm-1@2x.png\" alt=\"right forearm\" />\n                    <img  style={skinStyle} className=\"left-upper-arm\" src=\"static/zombieparts/left-upper-arm-1@2x.png\" alt=\"left upper arm\" />\n                    <img  style={skinStyle} className=\"left-hand\" src=\"static/zombieparts/hand1-1@2x.png\" alt=\"left hand\" />\n                    <img  style={skinStyle} className=\"right-hand\" src=\"static/zombieparts/hand-2-1@2x.png\" alt=\"right hand\" />\n                    <img  style={skinStyle} className=\"head\" src={this.currentHeadChoice()} alt=\"head\" />\n                    <img  style={eyeStyle}  className=\"eye\"  src={this.currentEyeChoice()} alt=\"eyes\" />\n                    <img  className=\"mouth\" src=\"static/zombieparts/mouth-1@2x.png\" alt=\"mouth\" />\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"zombie-preview\" v-images-loaded=\"zombieLoaded\">\n                    <img style={shirtStyle}className=\"left-feet\" src=\"static/zombieparts/left-feet-1@2x.png\" alt=\"left feet\" />\n                    <img style={shirtStyle}className=\"right-feet\" src=\"static/zombieparts/right-feet-1@2x.png\" alt=\"right feet\" />\n                    <img style={shirtStyle}className=\"left-leg\" src=\"static/zombieparts/left-leg-1@2x.png\" alt=\"left leg\" />\n                    <img style={shirtStyle}className=\"right-leg\" src=\"static/zombieparts/right-leg-1@2x.png\" alt=\"right leg\" />\n                    <img style={shirtStyle}className=\"left-thigh\" src=\"static/zombieparts/left-thigh-1@2x.png\" alt=\"left thigh\" />\n                    <img style={shirtStyle}className=\"right-thigh\" src=\"static/zombieparts/right-thigh-1@2x.png\" alt=\"right thigh\" />\n\n                    <img  style={skinStyle} className=\"right-upper-arm\" src=\"static/zombieparts/right-upper-arm-1@2x.png\" alt=\"right upper arm\" />\n                    <img  style={shirtStyle}className=\"torso\" src=\"static/zombieparts/torso-1@2x.png\" alt=\"torso\" />\n                    <img  style={shirtStyle} className=\"shirt\" src={this.currentShirtChoice()} alt=\"shirt\" />\n                    <img  style={skinStyle} className=\"left-forearm\" src=\"static/zombieparts/left-forearm-1@2x.png\" alt=\"left forearm\" />\n                    <img  style={skinStyle} className=\"right-forearm\" src=\"static/zombieparts/right-forearm-1@2x.png\" alt=\"right forearm\" />\n                    <img  style={skinStyle} className=\"left-upper-arm\" src=\"static/zombieparts/left-upper-arm-1@2x.png\" alt=\"left upper arm\" />\n                    <img  style={skinStyle} className=\"left-hand\" src=\"static/zombieparts/hand1-1@2x.png\" alt=\"left hand\" />\n                    <img  style={skinStyle} className=\"right-hand\" src=\"static/zombieparts/hand-2-1@2x.png\" alt=\"right hand\" />\n                    <img  style={skinStyle} className=\"head\" src={this.currentHeadChoice()} alt=\"head\" />\n                    <img  style={eyeStyle}  className=\"eye\"  src={this.currentEyeChoice()} alt=\"eyes\" />\n                    <img  className=\"mouth\" src=\"static/zombieparts/mouth-1@2x.png\" alt=\"mouth\" />\n                </div>\n            )\n        }\n\n    }\n}\n\nexport default ZombieChar;\n\n//                      <img  style={{filter: \"hue-rotate(90deg)\"}} className=\"head\" src={this.currentHeadChoice()} />","import React, { Component } from \"react\";\nimport { Card } from \"semantic-ui-react\";\nimport ZombieChar from \"./zombieChar\";\n\nclass ZombieCardContent extends Component {\n  truncate = (text, startChars, endChars) => {\n    if (text.length > 12) {\n      var start = text.substring(0, startChars);\n      var end = text.substring(text.length - endChars, text.length);\n      return start + \"...\" + end;\n    }\n    return text;\n  };\n\n  render() {\n    return (\n      <Card.Content>\n        <div>\n          {\" \"}\n          <ZombieChar DNA={this.props.zombie.zombieDNA} />{\" \"}\n        </div>\n        <Card.Header>\n          Zombie ID: <b>{this.props.zombie.zombieId}</b> <br /> Name :{\" \"}\n          <b>{this.truncate(this.props.zombie.zombieName, 8, 8)}</b>\n        </Card.Header>\n        <Card.Description>\n          DNA: {this.props.zombie.zombieDNA} <br />\n          Level: {this.props.zombie.zombieLevel} <br />\n          Ready Time: {this.props.zombie.zombieReadyTime} <br />\n          Wins: {this.props.zombie.zombieWinCount} <br />\n          Losses: {this.props.zombie.zombieLossCount} <br />\n          Owner: {this.truncate(this.props.zombie.zombieOwner, 12, 12)}\n        </Card.Description>\n      </Card.Content>\n    );\n  }\n}\nexport default ZombieCardContent;\n","import React, { Component } from \"react\";\nimport { Icon, Card, Header, Modal, Button } from \"semantic-ui-react\";\nimport ReactTooltip from \"react-tooltip\";\nimport ActionButton from \"./ActionButton\";\nimport ZombieCardContent from \"./zombieCardContent\";\n\nclass ZombieCard extends Component {\n  state = {\n    modalOpen: false\n  };\n\n  modalOpen() {\n    this.setState({ modalOpen: true });\n  }\n\n  handleClose = () => this.setState({ modalOpen: false });\n\n  truncate = (text, startChars, endChars) => {\n    if (text.length > 12) {\n      var start = text.substring(0, startChars);\n      var end = text.substring(text.length - endChars, text.length);\n      return start + \"...\" + end;\n    }\n    return text;\n  };\n\n  render() {\n    // define the button labels used in <ActionButton> further on down in the code\n\n    const attackButton = (\n      <div>\n        {\" \"}\n        Attack Zombie <br /> (70% chance of winning){\" \"}\n      </div>\n    );\n    const kittyButton = (\n      <div>\n        Eat CryptoKitty <br /> (burp!){\" \"}\n      </div>\n    );\n    const changeNameButton = (\n      <div>\n        Change Name <br /> (level > 2){\" \"}\n      </div>\n    );\n    const levelUpButton = (\n      <div>\n        Level Up\n        <br /> (cost = .001 eth){\" \"}\n      </div>\n    );\n    const transferZombieButton = (\n      <div>\n        Transfer Zombie\n        <br /> to New Owner{\" \"}\n      </div>\n    );\n\n    // create the JSX depending on whether you own the zombie or not\n\n    if (this.props.myOwner)\n      // Owner zombie: render card and tooltip and modal for zombie actions\n\n      return (\n        <Card style={{ backgroundColor: \"LightYellow\" }} raised>\n          <ReactTooltip delayShow={400} />\n\n          <a\n            href=\"javascript:;\"\n            data-tip=\"Click on me to view actions for this zombie\"\n            onClick={e => this.modalOpen(e)}\n          >\n            <ZombieCardContent zombie={this.props} />\n          </a>\n\n          {/* a modal is like an \"alert\", it's a popup that greys out the lower screen and displays its content on top of everything */}\n\n          <Modal open={this.state.modalOpen} onClose={this.handleClose}>\n            <Header\n              icon=\"browser\"\n              content=\"These are the actions you can take with your zombie!\"\n            />\n\n            <Modal.Content>\n              <ActionButton\n                pathname=\"/AttackZombie\"\n                buttonLabel={attackButton}\n                data={this.props}\n              />\n\n              <ActionButton\n                pathname=\"/FeedOnKitty\"\n                buttonLabel={kittyButton}\n                data={this.props}\n              />\n\n              <ActionButton\n                pathname=\"/ChangeName\"\n                buttonLabel={changeNameButton}\n                disableMe={this.props.zombieLevel <= 2}\n                data={this.props}\n              />\n\n              <ActionButton\n                pathname=\"/LevelUp\"\n                buttonLabel={levelUpButton}\n                data={this.props}\n              />\n\n              <ActionButton\n                pathname=\"/TransferZombie\"\n                buttonLabel={transferZombieButton}\n                data={this.props}\n              />\n            </Modal.Content>\n\n            <Modal.Actions>\n              <Button color=\"red\" onClick={this.handleClose} inverted>\n                <Icon name=\"cancel\" /> Close\n              </Button>\n            </Modal.Actions>\n          </Modal>\n        </Card>\n      );\n    // someone else's zombie.  just show the card.\n    else\n      return (\n        <Card style={{ backgroundColor: \"LavenderBlush\" }}>\n          <ZombieCardContent zombie={this.props} />\n        </Card>\n      );\n  }\n}\n\nexport default ZombieCard;\n","import React, { Component } from \"react\";\nimport { Card, Grid, Input, Segment, Pagination } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport ZombieCard from \"../components/zombieCard\";\n\nfunction mapStateToProps(state) {\n  return {\n    CZ: state.CZ,\n    userZombieCount: state.userZombieCount,\n    userAddress: state.userAddress\n  };\n}\n\nclass MyZombieInventory extends Component {\n  state = {\n    ZombieTable: [],\n    activePage: 1,\n    totalPages: Math.ceil(this.props.userZombieCount / 9)\n  };\n\n  componentDidMount = async () => {\n    await this.makeZombieCards();\n  };\n\n  onChange = async (e, pageInfo) => {\n    await this.setState({ activePage: pageInfo.activePage });\n    this.makeZombieCards();\n  };\n\n  handleInputChange = async (e, { value }) => {\n    await this.setState({ activePage: value });\n    this.makeZombieCards();\n  };\n  makeZombieCards = async () => {\n    const myZombies = await this.props.CZ.getZombiesByOwner(this.props.userAddress);\n    let zombieTable = [];\n    for (\n      var i = this.state.activePage * 9 - 9;\n      i < this.state.activePage * 9;\n      i++\n    ) {\n      try {\n        let z = myZombies[i];\n        let zombie = await this.props.CZ.zombies(z);\n        let myDate = new Date(zombie.readyTime * 1000).toLocaleString();\n        zombieTable.push(\n          <ZombieCard\n            key={z}\n            zombieId={z.toString()}\n            zombieName={zombie.name}\n            zombieDNA={zombie.dna.toString()}\n            zombieLevel={zombie.level}\n            zombieReadyTime={myDate}\n            zombieWinCount={zombie.winCount}\n            zombieLossCount={zombie.lossCount}\n            zombieOwner={this.props.userAddress}\n            myOwner={true}\n          />\n        );\n      } catch {\n        break;\n      }\n    }\n    this.setState({ zombieTable });\n  };\n\n  render() {\n    return (\n      <div>\n        <hr />\n        <h2> Your Zombie Inventory </h2>\n        The zombies you own have a yellow background; clicking anywhere on a\n        yellow card will bring up a list of actions you can perform.\n        <hr />\n        <Grid columns={2} verticalAlign=\"middle\">\n          <Grid.Column>\n            <Segment secondary>\n              <div>activePage: {this.state.activePage}</div>\n              <Input\n                min={1}\n                max={this.state.totalPages}\n                onChange={this.handleInputChange}\n                type=\"range\"\n                value={this.state.activePage}\n              />\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            <Pagination\n              activePage={this.state.activePage}\n              onPageChange={this.onChange}\n              totalPages={this.state.totalPages}\n            />\n          </Grid.Column>\n        </Grid>\n        <br /> <br />\n        <Card.Group> {this.state.zombieTable} </Card.Group>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(MyZombieInventory);\n","import React, { Component } from \"react\";\nimport {\n  Card,\n  Grid,\n  Input,\n  Segment,\n  Pagination,\n} from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\n\nimport ZombieCard from \"../components/zombieCard\";\n\nfunction mapStateToProps(state) {\n  return {\n    CZ: state.CZ,\n    totalZombieCount: state.totalZombieCount,\n    userAddress: state.userAddress\n  };\n}\n\nclass ZombieInventory extends Component {\n  state = {\n    ZombieTable: [],\n    activePage: 1,\n    totalPages: Math.ceil(this.props.totalZombieCount / 9)\n  };\n\n  componentDidMount = async () => {\n    await this.makeZombieCards();\n  };\n\n  onChange = async (e, pageInfo) => {\n    await this.setState({ activePage: pageInfo.activePage });\n    this.makeZombieCards();\n  };\n\n  handleInputChange = async (e, { value }) => {\n      await this.setState({ activePage: value });\n      this.makeZombieCards();\n  }\n\n  makeZombieCards = async () => {\n    let zList = [];\n    let zOwner = [];\n    await this.setState({ zombieTable: [] }); // clear screen while waiting for data\n    for (\n      let i = this.state.activePage * 9 - 9;\n      i < this.state.activePage * 9;\n      i++\n    ) {\n      try {\n        let metaData = await this.props.CZ.zombies(i);\n        zList.push(metaData);\n        let myOwner = await this.props.CZ.zombieToOwner(i);\n        zOwner.push(myOwner);\n      } catch (err) {\n        break;\n      }\n    }\n\n    // create a set of zombie cards in the state table\n    let zombieTable = [];\n    for (let i = 0; i < zList.length; i++) {\n      let myDate = new Date(zList[i].readyTime * 1000).toLocaleString();\n      zombieTable.push(\n        <ZombieCard\n          key={i}\n          zombieId={this.state.activePage * 9 - 9 + i}\n          zombieName={zList[i].name}\n          zombieDNA={zList[i].dna.toString()}\n          zombieLevel={zList[i].level}\n          zombieReadyTime={myDate}\n          zombieWinCount={zList[i].winCount}\n          zombieLossCount={zList[i].lossCount}\n          zombieOwner={zOwner[i]}\n          myOwner={this.props.userAddress === zOwner[i]}\n        />\n      );\n    }\n    this.setState({ zombieTable });\n  };\n\n  render() {\n    return (\n      <div>\n        <hr />\n        <h2> Complete Zombie Inventory </h2>\n        The zombies you own have a yellow background; clicking anywhere on a\n        yellow card will bring up a list of actions you can perform.\n        <hr />\n        <Grid columns={2} verticalAlign=\"middle\">\n          <Grid.Column>\n            <Segment secondary>\n              <div>activePage: {this.state.activePage}</div>\n              <Input\n                min={1}\n                max={this.state.totalPages}\n                onChange={this.handleInputChange}\n                type=\"range\"\n                value={this.state.activePage}\n              />\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            <Pagination\n              activePage={this.state.activePage}\n              onPageChange={this.onChange}\n              totalPages={this.state.totalPages}\n            />\n          </Grid.Column>\n        </Grid>\n        <br /> <br />\n        <div>\n          <Card.Group>{this.state.zombieTable}</Card.Group>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(ZombieInventory);\n","//\n// This is the \"Attack Zombie\" page\n//\n\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Button, Header, Icon, Form, Message } from \"semantic-ui-react\";\nimport ZombieCard from \"../components/zombieCard\";\nimport getZombieCount from \"../utils/getZombieCount\";\n\nfunction mapStateToProps(state) {\n  return {\n    CZ: state.CZ,\n    userAddress: state.userAddress\n  };\n}\n\nclass AttackZombie extends Component {\n  state = {\n    value: \"\",\n    message: \"\",\n    errorMessage: \"\",\n    loading: false,\n    zombieId: null\n  };\n\n  // get a random cryptokitty image and the hungry zombie ID when the component mounts\n\n  async componentDidMount() {\n    let zombieId = +this.props.location.state.zombieId;\n    let zombieLevel = +this.props.location.state.zombieLevel;\n    this.setState({\n      zombieId,\n      zombieLevel\n    });\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n    this.setState({\n      loading: true,\n      errorMessage: \"\",\n      message: \"waiting for blockchain transaction to complete...\"\n    });\n    try {\n      await this.props.CZ\n        .attack(this.state.zombieId, this.state.value) // contains the zombie ID and the target zombie ID\n      let newZombie = await this.props.CZ\n        .zombies(this.state.zombieId)\n\n      if (this.state.zombieLevel < newZombie.level) {\n        this.setState({\n          loading: false,\n          message: \"Battle complete.  YOU WON!!!!\"\n        });\n        getZombieCount(this.props.CZ, this.props.userAddress);\n      } else {\n        this.setState({\n          loading: false,\n          message: \"Battle complete.  WAHHHH.  YOU LOST!!!!\"\n        });\n      }\n    } catch (err) {\n      this.setState({\n        loading: false,\n        errorMessage: err.message,\n        message:\n          \"User rejected transaction or Cool Down period has not expired.\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        *\n        <Header\n          icon=\"browser\"\n          content=\"Enter opponent zombie ID!  If you win you bump up a level and create a new zombie !\"\n        />\n        <table>\n          <tr>\n            <th>\n              <ZombieCard\n                zombieId={this.state.zombieId}\n                zombieName={this.props.location.state.zombieName}\n                zombieDNA={this.props.location.state.zombieDNA}\n                zombieLevel={this.props.location.state.zombieLevel}\n                zombieReadyTime={this.props.location.state.zombieReadyTime}\n                zombieWinCount={this.props.location.state.zombieWinCount}\n                zombieLossCount={this.props.location.state.zombieLossCount}\n                zombieOwner={this.props.userAddress}\n                myOwner={false}\n              />\n            </th>\n            <th>\n              {\" \"}\n              <h2> &nbsp; &nbsp; Bite Me! &nbsp; &nbsp; </h2>\n            </th>\n            <th>\n              <img\n                src=\"static/images/zombieWinner3.jpg\"\n                width=\"300px\"\n                alt=\"zombie\"\n              />\n            </th>\n          </tr>\n        </table>\n        <br />\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n          <Form.Field>\n            <label>Opponent Zombie Id Number</label>\n            <input\n              placeholder=\"Zombie ID #\"\n              onChange={event =>\n                this.setState({\n                  value: event.target.value\n                })\n              }\n            />\n          </Form.Field>\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\n          <Button primary type=\"submit\" loading={this.state.loading}>\n            <Icon name=\"check\" />\n            Attack Zombie\n          </Button>\n          <Link to=\"/MyZombieInventory\">\n            <Button color=\"red\" inverted>\n              <Icon name=\"cancel\" /> Close\n            </Button>\n          </Link>\n          <hr />\n          <h2>{this.state.message}</h2>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(AttackZombie);\n","//\n// This is the \"Feed On Random Cryptokitty\" page\n//\n\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Button, Icon, Form, Message } from \"semantic-ui-react\";\nimport ZombieCard from \"../components/zombieCard\";\nimport getZombieCount from \"../utils/getZombieCount\";\n\nfunction mapStateToProps(state) {\n  return {\n    CZ: state.CZ,\n    userAddress: state.userAddress\n  };\n}\n\nclass FeedOnKitty extends Component {\n  state = {\n    value: \"\",\n    message: \"\",\n    errorMessage: \"\",\n    loading: false,\n    kittyImage: \"\",\n    hungryZombieId: null,\n    zombieName: \"\",\n    zombieDNA: 0\n  };\n\n  // get a random cryptokitty image and the hungry zombie ID when the component mounts\n\n  async componentDidMount() {\n    let hungryZombieId = +this.props.location.state.zombieId;\n    let url =\n      \"https://api.cryptokitties.co/kitties/\" +\n      Math.floor(Math.random() * 10000) +\n      1;\n    this.setState({ message: url });\n    const res = await fetch(url);\n    const kitty = await res.json();\n    this.setState({\n      kittyImage: kitty.image_url,\n      hungryZombieId\n    });\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n    this.setState({\n      loading: true,\n      errorMessage: \"\",\n      message: \"waiting for blockchain transaction to complete...\"\n    });\n    try {\n      await this.props.CZ.feedOnKitty(this.state.hungryZombieId, 0) // contains the zombie ID and a 0 for kitty ID since contract is random\n      this.setState({\n        loading: false,\n        message: \"You have eaten a poor innocent CryptoKitty.   Buuuuurrrrpp!!!\"\n      });\n      getZombieCount(this.props.CZ, this.props.userAddress);\n    } catch (err) {\n      this.setState({\n        loading: false,\n        errorMessage: err.message,\n        message: \"User rejected transaction\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        {/*<Header icon=\"browser\" content=\"Feed on Random CryptoKitty\" /> */}\n        <h2>Oh No! A Zombie! Please do not eat me!!!</h2>\n        <table>\n          <tr>\n            <th>\n              <ZombieCard\n                zombieId={this.state.hungryZombieId}\n                zombieName={this.props.location.state.zombieName}\n                zombieDNA={this.props.location.state.zombieDNA}\n                zombieLevel={this.props.location.state.zombieLevel}\n                zombieReadyTime={this.props.location.state.zombieReadyTime}\n                zombieWinCount={this.props.location.state.zombieWinCount}\n                zombieLossCount={this.props.location.state.zombieLossCount}\n                zombieOwner={this.props.userAddress}\n                myOwner={false}\n              />\n            </th>\n            <th>\n              <img src={this.state.kittyImage} width=\"400px\" alt=\"CryptoKitty Victim\" />\n            </th>\n          </tr>\n        </table>\n        <br />\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\n          <Button primary type=\"submit\" loading={this.state.loading}>\n            <Icon name=\"check\" />\n            Eat CryptoKitty\n          </Button>\n          <Link to=\"/MyZombieInventory\">\n            <Button color=\"red\" inverted>\n              <Icon name=\"cancel\" /> Close\n            </Button>\n          </Link>\n          <hr />\n          <h2>{this.state.message}</h2>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(FeedOnKitty);\n","//\n// This is the \"Change Name\" page\n//\n\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Button, Header, Icon, Form, Message } from \"semantic-ui-react\";\nimport ZombieCard from \"../components/zombieCard\";\n\nfunction mapStateToProps(state) {\n  return {\n    CZ: state.CZ,\n    userAddress: state.userAddress\n  };\n}\n\nclass ChangeName extends Component {\n  state = {\n    value: \"\",\n    message: \"\",\n    errorMessage: \"\",\n    loading: false,\n    zombieId: null\n  };\n\n\n  async componentDidMount() {\n    let zombieId = +this.props.location.state.zombieId;\n    this.setState({\n      zombieId\n    });\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n    this.setState({\n      loading: true,\n      errorMessage: \"\",\n      message: \"waiting for blockchain transaction to complete...\"\n    });\n    try {\n      await this.props.CZ.changeName(this.state.zombieId, this.state.value) // contains the zombie ID and the new name\n      this.setState({\n        loading: false,\n        message: \"Yay!!!!  I have a brand new name!\"\n      });\n    } catch (err) {\n      this.setState({\n        loading: false,\n        errorMessage: err.message,\n        message: \"User rejected transaction\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        *<Header icon=\"browser\" content=\"Please give me a WORTHY name!!\" />\n        <table>\n          <tr>\n            <th>\n              <ZombieCard\n                zombieId={this.state.zombieId}\n                zombieName={this.props.location.state.zombieName}\n                zombieDNA={this.props.location.state.zombieDNA}\n                zombieLevel={this.props.location.state.zombieLevel}\n                zombieReadyTime={this.props.location.state.zombieReadyTime}\n                zombieWinCount={this.props.location.state.zombieWinCount}\n                zombieLossCount={this.props.location.state.zombieLossCount}\n                zombieOwner={this.props.userAddress}\n                myOwner={false}\n              />\n            </th>\n            <th>\n              <img src=\"static/images/nametag.jpg\" alt=\"name tag\" />\n            </th>\n          </tr>\n        </table>\n        <br />\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n          <Form.Field>\n            <label>New Zombie Name</label>\n            <input\n              placeholder=\"Name\"\n              onChange={event =>\n                this.setState({\n                  value: event.target.value\n                })\n              }\n            />\n          </Form.Field>\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\n          <Button primary type=\"submit\" loading={this.state.loading}>\n            <Icon name=\"check\" />\n            Change Name\n          </Button>\n          <Link to=\"/MyZombieInventory\">\n            <Button color=\"red\" inverted>\n              <Icon name=\"cancel\" /> Close\n            </Button>\n          </Link>\n          <hr />\n          <h2>{this.state.message}</h2>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(ChangeName);\n","//\n// This is the \"Level Up\" page\n//\n\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Button, Header, Icon, Form, Message } from \"semantic-ui-react\";\nimport ZombieCard from \"../components/zombieCard\";\n\nimport { ethers } from \"ethers\";\n\nfunction mapStateToProps(state) {\n  return {\n    web3Instance: state.web3Instance,\n    CZ: state.CZ,\n    userAddress: state.userAddress\n  };\n}\n\nclass LevelUp extends Component {\n  state = {\n    value: \"\",\n    message: \"\",\n    errorMessage: \"\",\n    loading: false,\n    zombieId: null\n  };\n\n  // get a random cryptokitty image and the hungry zombie ID when the component mounts\n\n  async componentDidMount() {\n    let zombieId = +this.props.location.state.zombieId;\n    this.setState({\n      zombieId\n    });\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n    this.setState({\n      loading: true,\n      errorMessage: \"\",\n      message: \"waiting for blockchain transaction to complete...\"\n    });\n    try {\n      await this.props.CZ\n        .levelUp(this.state.zombieId, {value: ethers.utils.parseEther(\".001\")})\n      this.setState({\n        loading: false,\n        message: \"Yay!!!!  I have more power!\"\n      });\n    } catch (err) {\n      this.setState({\n        loading: false,\n        errorMessage: err.message,\n        message: \"User rejected transaction\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        *\n        <Header\n          icon=\"browser\"\n          content=\"Please buy me some super-strength!!  It only costs .001 ether.\"\n        />\n        <table>\n          <tr>\n            <th>\n              <ZombieCard\n                zombieId={this.state.zombieId}\n                zombieName={this.props.location.state.zombieName}\n                zombieDNA={this.props.location.state.zombieDNA}\n                zombieLevel={this.props.location.state.zombieLevel}\n                zombieReadyTime={this.props.location.state.zombieReadyTime}\n                zombieWinCount={this.props.location.state.zombieWinCount}\n                zombieLossCount={this.props.location.state.zombieLossCount}\n                zombieOwner={this.props.userAddress}\n                myOwner={false}\n              />\n            </th>\n            <th>\n              <img\n                src=\"static/images/LevelUp.jpg\"\n                width=\"400px\"\n                alt=\"LevelUp\"\n              />\n            </th>\n          </tr>\n        </table>\n        <br />\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\n          <Button primary type=\"submit\" loading={this.state.loading}>\n            <Icon name=\"check\" />\n            Level up!\n          </Button>\n          <Link to=\"/MyZombieInventory\">\n            <Button color=\"red\" inverted>\n              <Icon name=\"cancel\" /> Close\n            </Button>\n          </Link>\n          <hr />\n          <h2>{this.state.message}</h2>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(LevelUp);\n","//\n// This is the \"Transfer Zombie\" page\n//\n\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Button, Header, Icon, Form, Message } from \"semantic-ui-react\";\nimport ZombieCard from \"../components/zombieCard\";\n\nfunction mapStateToProps(state) {\n  return {\n    CZ: state.CZ,\n    userAddress: state.userAddress\n  };\n}\n\nclass TransferZombie extends Component {\n  state = {\n    value: \"\",\n    message: \"\",\n    errorMessage: \"\",\n    loading: false,\n    zombieId: null\n  };\n\n  // get a random cryptokitty image and the hungry zombie ID when the component mounts\n\n  async componentDidMount() {\n    let zombieId = +this.props.location.state.zombieId;\n    this.setState({\n      zombieId\n    });\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n    this.setState({\n      loading: true,\n      errorMessage: \"\",\n      message: \"waiting for blockchain transaction to complete...\"\n    });\n    try {\n      await this.props.CZ\n        .transferFrom(this.props.userAddress, this.state.value, this.state.zombieId) // from, to, ID\n      this.setState({\n        loading: false,\n        message: \"Yay!!!!  I have a brand new owner!\"\n      });\n    } catch (err) {\n      this.setState({\n        loading: false,\n        errorMessage: err.message,\n        message: \"User rejected transaction\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        *<Header icon=\"browser\" content=\"Please give me a nice new owner!!\" />\n        <table>\n          <tr>\n            <th>\n              <ZombieCard\n                zombieId={this.state.zombieId}\n                zombieName={this.props.location.state.zombieName}\n                zombieDNA={this.props.location.state.zombieDNA}\n                zombieLevel={this.props.location.state.zombieLevel}\n                zombieReadyTime={this.props.location.state.zombieReadyTime}\n                zombieWinCount={this.props.location.state.zombieWinCount}\n                zombieLossCount={this.props.location.state.zombieLossCount}\n                zombieOwner={this.props.userAddress}\n                myOwner={false}\n              />\n            </th>\n            <th>\n              <img src=\"static/images/newOwnership.jpg\" alt=\"under new ownership\" />\n            </th>\n          </tr>\n        </table>\n        <br />\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n          <Form.Field>\n            <label>Enter New Owner Ethereum Address</label>\n            <input\n              placeholder=\"Address\"\n              onChange={event =>\n                this.setState({\n                  value: event.target.value\n                })\n              }\n            />\n          </Form.Field>\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\n          <Button primary type=\"submit\" loading={this.state.loading}>\n            <Icon name=\"check\" />\n            Transfer Zombie\n          </Button>\n          <Link to=\"/MyZombieInventory\">\n            <Button color=\"red\" inverted>\n              <Icon name=\"cancel\" /> Close\n            </Button>\n          </Link>\n          <hr />\n          <h2>{this.state.message}</h2>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(TransferZombie);\n","import React, { Component } from \"react\";\nimport initBlockchain from \"./utils/initBlockchain\";\nimport getZombieCount from \"./utils/getZombieCount\";\n\nimport { HashRouter, Route } from \"react-router-dom\";\nimport { Container } from \"semantic-ui-react\";\nimport { Provider } from \"react-redux\";\n\nimport TopBar from \"./components/TopBar\";\n\nimport Greeting from \"./pages/Greeting\";\nimport MyZombieInventory from \"./pages/MyZombieInventory\";\nimport ZombieInventory from \"./pages/ZombieInventory\";\nimport AttackZombie from \"./pages/AttackZombie\";\nimport FeedOnKitty from \"./pages/FeedOnKitty\";\nimport ChangeName from \"./pages/ChangeName\";\nimport LevelUp from \"./pages/LevelUp\";\nimport TransferZombie from \"./pages/TransferZombie\";\n\nimport store from \"./redux/store\";\n\n//\n//  This is the main application page; routing is handled to render other pages in the application\n\nclass App extends Component {\n  // define a state variable for important connectivity data to the blockchain\n  // this will then be put into the REDUX store for retrieval by other pages\n\n  // **************************************************************************\n  //\n  // React will call this routine only once when App page loads; do initialization here\n  //\n  // **************************************************************************\n\n\n    componentDidMount = async () => {\n      try {\n          const CZInfo = await initBlockchain(); // from utils directory;  connect to provider and to metamask or other signer\n          await getZombieCount(CZInfo.CZ, CZInfo.userAddress); // get user count and total count of zombies\n      } catch (error) {\n          // Catch any errors for any of the above operations.\n          alert(`Failed to load provider, signer, or contract. Check console for details.`);\n          console.log(error);\n      }\n    };\n\n\n\n\n\n  // **************************************************************************\n  //\n  // main render routine for App component;\n  //      contains route info to navigate between pages\n  //\n  // **************************************************************************\n\n  render() {\n    return (\n      <Provider store={store}>\n        <HashRouter>\n          <Container>\n            <TopBar state={this.state} />\n            <div>\n              <Route exact path=\"/\" component={Greeting} />\n              <Route\n                exact\n                path=\"/myZombieInventory\"\n                component={MyZombieInventory}\n              />\n              <Route\n                exact\n                path=\"/ZombieInventory\"\n                component={ZombieInventory}\n              />\n              {/* routes used in zombie action modal */}\n              <Route exact path=\"/AttackZombie\" component={AttackZombie} />\n              <Route exact path=\"/FeedOnKitty\" component={FeedOnKitty} />\n              <Route exact path=\"/ChangeName\" component={ChangeName} />\n              <Route exact path=\"/LevelUp\" component={LevelUp} />\n              <Route exact path=\"/TransferZombie\" component={TransferZombie} />\n            </div>\n          </Container>\n        </HashRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"semantic-ui-css/semantic.min.css\";\n\n// Use REDUX memory-base \"store\" to pass around state info between pages and components\n\nReactDOM.render(\n    <App />,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}