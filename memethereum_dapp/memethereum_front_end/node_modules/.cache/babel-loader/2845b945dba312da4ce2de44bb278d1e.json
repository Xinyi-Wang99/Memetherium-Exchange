{"ast":null,"code":"//\n//      This is the REDUX \"duck\" format file.\n//\n//      This file contains all the constants, reducers, and action creators in one file\n//      rather than spread them out among multiple directories and files.\n//\n// Action Types\n// Types are listened for within the reducer switch whenever an action is fired off.\n// The action is sent to the reducer with a type, and when that type matches the type within the a case of the switch,\n// some sort of data manipulation is fired off.\n//\n// They are defined as all upper-case constants and may be exported if needed elsewhere.\nvar BLOCKCHAIN_INITIALIZED=\"BLOCKCHAIN_INITIALIZED\";var ZOMBIE_COUNT=\"ZOMBIE_COUNT\";//  Actions and Action Creator Functions\n//\n// Actions are simple javascript objects that at least contain a type, and may also contain data that can be sent to the reducer.\n// When the user clicks on something that has an effect on the state of an app, an action creator sends an action to the reducer\n// where the data manipulation happens.\n//\n// An action typically looks like this:   { type: ADD_ITEM, item: 'Adding this item' }\n//\n// Action creators are the functions that create actions and send them to the reducer.\n// They usually return an action, sometimes can dispatch multiple actions (with the help of middleware like thunk),\n// or can begin asynchronous events like API calls.\nexport function blockchainInitialized(data){return{type:BLOCKCHAIN_INITIALIZED,payload:data};}//\n//  define the initial state for the store\n//\nvar initialState={CZ:{},// contract instance with methods, etc.\nsigner:null,userAddress:0x0,provider:null,userZombieCount:0,totalZombieCount:0};// Reducers\n//\n// The reducer is typically the only thing that touches the store.\n// It only deals within a particular part of the store, initialized as initialState.\n// It's a pure switch statement that does not directly change the state because state is immutable.\n// That means you cannot use a method like .pop or .push that manipulates the array it's called on.\n// Instead we create a now store from the old store and any information we want to put in to it.\n// All reducers have a default case that just returns state.\n//\n// In this case, note that it is the default export.\nexport default function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;console.log(\"reducer\",action);switch(action.type){case BLOCKCHAIN_INITIALIZED:return Object.assign({},state,{CZ:action.payload.CZ,signer:action.payload.signer,userAddress:action.payload.userAddress,provider:action.payload.provider,userZombieCount:action.payload.userZombieCount});case ZOMBIE_COUNT:console.log(\"my reducer zombie count\",state);return Object.assign({},state,{totalZombieCount:action.payload.totalZombieCount,userZombieCount:action.payload.userZombieCount});default:return state;}}","map":{"version":3,"sources":["/Users/jgersch/CSU Classes/CS458 Spring 2021/Projects/CryptoZombiesGame2021/zombiedapp/src/redux/modules/czAppDuck.js"],"names":["BLOCKCHAIN_INITIALIZED","ZOMBIE_COUNT","blockchainInitialized","data","type","payload","initialState","CZ","signer","userAddress","provider","userZombieCount","totalZombieCount","reducer","state","action","console","log","Object","assign"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA,GAAMA,CAAAA,sBAAsB,CAAG,wBAA/B,CACA,GAAMC,CAAAA,YAAY,CAAG,cAArB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,MAAO,SAASC,CAAAA,qBAAT,CAA+BC,IAA/B,CAAqC,CAC1C,MAAO,CACLC,IAAI,CAAEJ,sBADD,CAELK,OAAO,CAAEF,IAFJ,CAAP,CAID,CAED;AACA;AACA;AAEA,GAAMG,CAAAA,YAAY,CAAG,CACjBC,EAAE,CAAE,EADa,CACT;AACRC,MAAM,CAAE,IAFS,CAGjBC,WAAW,CAAE,GAHI,CAIjBC,QAAQ,CAAE,IAJO,CAKjBC,eAAe,CAAE,CALA,CAMjBC,gBAAgB,CAAE,CAND,CAArB,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,cAAe,SAASC,CAAAA,OAAT,EAA+C,IAA9BC,CAAAA,KAA8B,2DAAtBR,YAAsB,IAARS,CAAAA,MAAQ,2CAC5DC,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuBF,MAAvB,EACA,OAAQA,MAAM,CAACX,IAAf,EAEE,IAAKJ,CAAAA,sBAAL,CACI,MAAOkB,CAAAA,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBL,KAAlB,CAAyB,CAC5BP,EAAE,CAAEQ,MAAM,CAACV,OAAP,CAAeE,EADS,CAE5BC,MAAM,CAAEO,MAAM,CAACV,OAAP,CAAeG,MAFK,CAG5BC,WAAW,CAAEM,MAAM,CAACV,OAAP,CAAeI,WAHA,CAI5BC,QAAQ,CAAEK,MAAM,CAACV,OAAP,CAAeK,QAJG,CAK5BC,eAAe,CAAEI,MAAM,CAACV,OAAP,CAAeM,eALJ,CAAzB,CAAP,CAQJ,IAAKV,CAAAA,YAAL,CACIe,OAAO,CAACC,GAAR,CAAY,yBAAZ,CAAuCH,KAAvC,EACF,MAAOI,CAAAA,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBL,KAAlB,CAAyB,CAC9BF,gBAAgB,CAAEG,MAAM,CAACV,OAAP,CAAeO,gBADH,CAE9BD,eAAe,CAAEI,MAAM,CAACV,OAAP,CAAeM,eAFF,CAAzB,CAAP,CAKF,QACE,MAAOG,CAAAA,KAAP,CAnBJ,CAqBD","sourcesContent":["//\n//      This is the REDUX \"duck\" format file.\n//\n//      This file contains all the constants, reducers, and action creators in one file\n//      rather than spread them out among multiple directories and files.\n//\n\n// Action Types\n\n// Types are listened for within the reducer switch whenever an action is fired off.\n// The action is sent to the reducer with a type, and when that type matches the type within the a case of the switch,\n// some sort of data manipulation is fired off.\n//\n// They are defined as all upper-case constants and may be exported if needed elsewhere.\n\nconst BLOCKCHAIN_INITIALIZED = \"BLOCKCHAIN_INITIALIZED\";\nconst ZOMBIE_COUNT = \"ZOMBIE_COUNT\";\n\n//  Actions and Action Creator Functions\n//\n// Actions are simple javascript objects that at least contain a type, and may also contain data that can be sent to the reducer.\n// When the user clicks on something that has an effect on the state of an app, an action creator sends an action to the reducer\n// where the data manipulation happens.\n//\n// An action typically looks like this:   { type: ADD_ITEM, item: 'Adding this item' }\n//\n// Action creators are the functions that create actions and send them to the reducer.\n// They usually return an action, sometimes can dispatch multiple actions (with the help of middleware like thunk),\n// or can begin asynchronous events like API calls.\n\n\nexport function blockchainInitialized(data) {\n  return {\n    type: BLOCKCHAIN_INITIALIZED,\n    payload: data\n  };\n}\n\n//\n//  define the initial state for the store\n//\n\nconst initialState = {\n    CZ: {}, // contract instance with methods, etc.\n    signer: null,\n    userAddress: 0x0,\n    provider: null,\n    userZombieCount: 0,\n    totalZombieCount: 0\n};\n\n// Reducers\n//\n// The reducer is typically the only thing that touches the store.\n// It only deals within a particular part of the store, initialized as initialState.\n// It's a pure switch statement that does not directly change the state because state is immutable.\n// That means you cannot use a method like .pop or .push that manipulates the array it's called on.\n// Instead we create a now store from the old store and any information we want to put in to it.\n// All reducers have a default case that just returns state.\n//\n// In this case, note that it is the default export.\n\nexport default function reducer(state = initialState, action) {\n  console.log(\"reducer\", action);\n  switch (action.type) {\n\n    case BLOCKCHAIN_INITIALIZED:\n        return Object.assign({}, state, {\n            CZ: action.payload.CZ,\n            signer: action.payload.signer,\n            userAddress: action.payload.userAddress,\n            provider: action.payload.provider,\n            userZombieCount: action.payload.userZombieCount\n        });\n\n    case ZOMBIE_COUNT:\n        console.log(\"my reducer zombie count\", state);\n      return Object.assign({}, state, {\n        totalZombieCount: action.payload.totalZombieCount,\n        userZombieCount: action.payload.userZombieCount\n      });\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}